
Cortex_m0+_ATSAMD21G18A_metro_m0_Express.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e4  00002000  00002000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  000041e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000405c  20000008  000041ec  00010008  2**2
                  ALLOC
  3 .stack        00002004  20004064  00008248  00010008  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  6 .debug_info   000167e4  00000000  00000000  00010089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002944  00000000  00000000  0002686d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007064  00000000  00000000  000291b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006a8  00000000  00000000  00030215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000928  00000000  00000000  000308bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004d88  00000000  00000000  000311e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab67  00000000  00000000  00035f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008c1f0  00000000  00000000  00040ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001210  00000000  00000000  000cccc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	68 60 00 20 c9 3e 00 00 c5 3e 00 00 c5 3e 00 00     h`. .>...>...>..
	...
    202c:	c5 3e 00 00 00 00 00 00 00 00 00 00 f1 22 00 00     .>..........."..
    203c:	35 23 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     5#...>...>...>..
    204c:	c5 3e 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     .>...>...>...>..
    205c:	c5 3e 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     .>...>...>...>..
    206c:	c5 3e 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     .>...>...>...>..
    207c:	c5 3e 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     .>...>...>...>..
    208c:	c5 3e 00 00 c5 3e 00 00 00 00 00 00 00 00 00 00     .>...>..........
    209c:	c5 3e 00 00 c5 3e 00 00 c5 3e 00 00 c5 3e 00 00     .>...>...>...>..
    20ac:	c5 3e 00 00 00 00 00 00                             .>......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000008 	.word	0x20000008
    20d4:	00000000 	.word	0x00000000
    20d8:	000041e4 	.word	0x000041e4

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	2000000c 	.word	0x2000000c
    2108:	000041e4 	.word	0x000041e4
    210c:	000041e4 	.word	0x000041e4
    2110:	00000000 	.word	0x00000000

00002114 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2114:	0003      	movs	r3, r0
    2116:	3308      	adds	r3, #8
    2118:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    211a:	2201      	movs	r2, #1
    211c:	4252      	negs	r2, r2
    211e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2120:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2122:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2124:	2300      	movs	r3, #0
    2126:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2128:	4770      	bx	lr

0000212a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    212a:	2300      	movs	r3, #0
    212c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    212e:	4770      	bx	lr

00002130 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2130:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2132:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2134:	689a      	ldr	r2, [r3, #8]
    2136:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2138:	689a      	ldr	r2, [r3, #8]
    213a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    213c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    213e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2140:	6803      	ldr	r3, [r0, #0]
    2142:	3301      	adds	r3, #1
    2144:	6003      	str	r3, [r0, #0]
}
    2146:	4770      	bx	lr

00002148 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2148:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    214a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    214c:	0002      	movs	r2, r0
    214e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    2150:	1c63      	adds	r3, r4, #1
    2152:	d102      	bne.n	215a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    2154:	6902      	ldr	r2, [r0, #16]
    2156:	e004      	b.n	2162 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    2158:	001a      	movs	r2, r3
    215a:	6853      	ldr	r3, [r2, #4]
    215c:	681d      	ldr	r5, [r3, #0]
    215e:	42ac      	cmp	r4, r5
    2160:	d2fa      	bcs.n	2158 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2162:	6853      	ldr	r3, [r2, #4]
    2164:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2166:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2168:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    216a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    216c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    216e:	6803      	ldr	r3, [r0, #0]
    2170:	3301      	adds	r3, #1
    2172:	6003      	str	r3, [r0, #0]
}
    2174:	bd30      	pop	{r4, r5, pc}

00002176 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    2176:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2178:	6842      	ldr	r2, [r0, #4]
    217a:	6881      	ldr	r1, [r0, #8]
    217c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    217e:	6882      	ldr	r2, [r0, #8]
    2180:	6841      	ldr	r1, [r0, #4]
    2182:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2184:	685a      	ldr	r2, [r3, #4]
    2186:	4290      	cmp	r0, r2
    2188:	d006      	beq.n	2198 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    218a:	2200      	movs	r2, #0
    218c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    218e:	681a      	ldr	r2, [r3, #0]
    2190:	3a01      	subs	r2, #1
    2192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2194:	6818      	ldr	r0, [r3, #0]
}
    2196:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2198:	6882      	ldr	r2, [r0, #8]
    219a:	605a      	str	r2, [r3, #4]
    219c:	e7f5      	b.n	218a <uxListRemove+0x14>
	...

000021a0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    21a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    21a2:	2300      	movs	r3, #0
    21a4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    21a6:	4b06      	ldr	r3, [pc, #24]	; (21c0 <prvTaskExitError+0x20>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	3301      	adds	r3, #1
    21ac:	d001      	beq.n	21b2 <prvTaskExitError+0x12>
    21ae:	b672      	cpsid	i
    21b0:	e7fe      	b.n	21b0 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    21b2:	b672      	cpsid	i
	while( ulDummy == 0 )
    21b4:	9b01      	ldr	r3, [sp, #4]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d0fc      	beq.n	21b4 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    21ba:	b002      	add	sp, #8
    21bc:	4770      	bx	lr
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000000 	.word	0x20000000
	...

000021d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    21d0:	4a0b      	ldr	r2, [pc, #44]	; (2200 <pxCurrentTCBConst2>)
    21d2:	6813      	ldr	r3, [r2, #0]
    21d4:	6818      	ldr	r0, [r3, #0]
    21d6:	3020      	adds	r0, #32
    21d8:	f380 8809 	msr	PSP, r0
    21dc:	2002      	movs	r0, #2
    21de:	f380 8814 	msr	CONTROL, r0
    21e2:	f3bf 8f6f 	isb	sy
    21e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    21e8:	46ae      	mov	lr, r5
    21ea:	bc08      	pop	{r3}
    21ec:	bc04      	pop	{r2}
    21ee:	b662      	cpsie	i
    21f0:	4718      	bx	r3
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	46c0      	nop			; (mov r8, r8)
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	46c0      	nop			; (mov r8, r8)
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	46c0      	nop			; (mov r8, r8)
    21fe:	46c0      	nop			; (mov r8, r8)

00002200 <pxCurrentTCBConst2>:
    2200:	20003ebc 	.word	0x20003ebc

00002204 <pxPortInitialiseStack>:
{
    2204:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2206:	1f03      	subs	r3, r0, #4
    2208:	2480      	movs	r4, #128	; 0x80
    220a:	0464      	lsls	r4, r4, #17
    220c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    220e:	3b04      	subs	r3, #4
    2210:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    2212:	3b04      	subs	r3, #4
    2214:	4902      	ldr	r1, [pc, #8]	; (2220 <pxPortInitialiseStack+0x1c>)
    2216:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    2218:	3b14      	subs	r3, #20
    221a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    221c:	3840      	subs	r0, #64	; 0x40
}
    221e:	bd10      	pop	{r4, pc}
    2220:	000021a1 	.word	0x000021a1

00002224 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    2224:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2226:	4b0f      	ldr	r3, [pc, #60]	; (2264 <xPortStartScheduler+0x40>)
    2228:	6819      	ldr	r1, [r3, #0]
    222a:	22ff      	movs	r2, #255	; 0xff
    222c:	0412      	lsls	r2, r2, #16
    222e:	430a      	orrs	r2, r1
    2230:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2232:	6819      	ldr	r1, [r3, #0]
    2234:	22ff      	movs	r2, #255	; 0xff
    2236:	0612      	lsls	r2, r2, #24
    2238:	430a      	orrs	r2, r1
    223a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    223c:	4a0a      	ldr	r2, [pc, #40]	; (2268 <xPortStartScheduler+0x44>)
    223e:	2300      	movs	r3, #0
    2240:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    2242:	490a      	ldr	r1, [pc, #40]	; (226c <xPortStartScheduler+0x48>)
    2244:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2246:	480a      	ldr	r0, [pc, #40]	; (2270 <xPortStartScheduler+0x4c>)
    2248:	490a      	ldr	r1, [pc, #40]	; (2274 <xPortStartScheduler+0x50>)
    224a:	6008      	str	r0, [r1, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    224c:	2107      	movs	r1, #7
    224e:	6011      	str	r1, [r2, #0]
	uxCriticalNesting = 0;
    2250:	4a09      	ldr	r2, [pc, #36]	; (2278 <xPortStartScheduler+0x54>)
    2252:	6013      	str	r3, [r2, #0]
	vPortStartFirstTask();
    2254:	4b09      	ldr	r3, [pc, #36]	; (227c <xPortStartScheduler+0x58>)
    2256:	4798      	blx	r3
	vTaskSwitchContext();
    2258:	4b09      	ldr	r3, [pc, #36]	; (2280 <xPortStartScheduler+0x5c>)
    225a:	4798      	blx	r3
	prvTaskExitError();
    225c:	4b09      	ldr	r3, [pc, #36]	; (2284 <xPortStartScheduler+0x60>)
    225e:	4798      	blx	r3
}
    2260:	2000      	movs	r0, #0
    2262:	bd10      	pop	{r4, pc}
    2264:	e000ed20 	.word	0xe000ed20
    2268:	e000e010 	.word	0xe000e010
    226c:	e000e018 	.word	0xe000e018
    2270:	00001f3f 	.word	0x00001f3f
    2274:	e000e014 	.word	0xe000e014
    2278:	20000000 	.word	0x20000000
    227c:	000021d1 	.word	0x000021d1
    2280:	00003289 	.word	0x00003289
    2284:	000021a1 	.word	0x000021a1

00002288 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2288:	2280      	movs	r2, #128	; 0x80
    228a:	0552      	lsls	r2, r2, #21
    228c:	4b03      	ldr	r3, [pc, #12]	; (229c <vPortYield+0x14>)
    228e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    2290:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2294:	f3bf 8f6f 	isb	sy
}
    2298:	4770      	bx	lr
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	e000ed04 	.word	0xe000ed04

000022a0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    22a0:	b672      	cpsid	i
    uxCriticalNesting++;
    22a2:	4a04      	ldr	r2, [pc, #16]	; (22b4 <vPortEnterCritical+0x14>)
    22a4:	6813      	ldr	r3, [r2, #0]
    22a6:	3301      	adds	r3, #1
    22a8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    22aa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    22ae:	f3bf 8f6f 	isb	sy
}
    22b2:	4770      	bx	lr
    22b4:	20000000 	.word	0x20000000

000022b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    22b8:	4b06      	ldr	r3, [pc, #24]	; (22d4 <vPortExitCritical+0x1c>)
    22ba:	681b      	ldr	r3, [r3, #0]
    22bc:	2b00      	cmp	r3, #0
    22be:	d101      	bne.n	22c4 <vPortExitCritical+0xc>
    22c0:	b672      	cpsid	i
    22c2:	e7fe      	b.n	22c2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    22c4:	3b01      	subs	r3, #1
    22c6:	4a03      	ldr	r2, [pc, #12]	; (22d4 <vPortExitCritical+0x1c>)
    22c8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    22ca:	2b00      	cmp	r3, #0
    22cc:	d100      	bne.n	22d0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    22ce:	b662      	cpsie	i
}
    22d0:	4770      	bx	lr
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	20000000 	.word	0x20000000

000022d8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    22d8:	f3ef 8010 	mrs	r0, PRIMASK
    22dc:	b672      	cpsid	i
    22de:	4770      	bx	lr

000022e0 <vClearInterruptMaskFromISR>:
	__asm volatile(
    22e0:	f380 8810 	msr	PRIMASK, r0
    22e4:	4770      	bx	lr
	...

000022f0 <PendSV_Handler>:
	__asm volatile
    22f0:	f3ef 8009 	mrs	r0, PSP
    22f4:	4b0e      	ldr	r3, [pc, #56]	; (2330 <pxCurrentTCBConst>)
    22f6:	681a      	ldr	r2, [r3, #0]
    22f8:	3820      	subs	r0, #32
    22fa:	6010      	str	r0, [r2, #0]
    22fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    22fe:	4644      	mov	r4, r8
    2300:	464d      	mov	r5, r9
    2302:	4656      	mov	r6, sl
    2304:	465f      	mov	r7, fp
    2306:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2308:	b508      	push	{r3, lr}
    230a:	b672      	cpsid	i
    230c:	f000 ffbc 	bl	3288 <vTaskSwitchContext>
    2310:	b662      	cpsie	i
    2312:	bc0c      	pop	{r2, r3}
    2314:	6811      	ldr	r1, [r2, #0]
    2316:	6808      	ldr	r0, [r1, #0]
    2318:	3010      	adds	r0, #16
    231a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    231c:	46a0      	mov	r8, r4
    231e:	46a9      	mov	r9, r5
    2320:	46b2      	mov	sl, r6
    2322:	46bb      	mov	fp, r7
    2324:	f380 8809 	msr	PSP, r0
    2328:	3820      	subs	r0, #32
    232a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    232c:	4718      	bx	r3
    232e:	46c0      	nop			; (mov r8, r8)

00002330 <pxCurrentTCBConst>:
    2330:	20003ebc 	.word	0x20003ebc

00002334 <SysTick_Handler>:
{
    2334:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    2336:	4b07      	ldr	r3, [pc, #28]	; (2354 <SysTick_Handler+0x20>)
    2338:	4798      	blx	r3
    233a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    233c:	4b06      	ldr	r3, [pc, #24]	; (2358 <SysTick_Handler+0x24>)
    233e:	4798      	blx	r3
    2340:	2800      	cmp	r0, #0
    2342:	d003      	beq.n	234c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    2344:	2280      	movs	r2, #128	; 0x80
    2346:	0552      	lsls	r2, r2, #21
    2348:	4b04      	ldr	r3, [pc, #16]	; (235c <SysTick_Handler+0x28>)
    234a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    234c:	0020      	movs	r0, r4
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <SysTick_Handler+0x2c>)
    2350:	4798      	blx	r3
}
    2352:	bd10      	pop	{r4, pc}
    2354:	000022d9 	.word	0x000022d9
    2358:	00003011 	.word	0x00003011
    235c:	e000ed04 	.word	0xe000ed04
    2360:	000022e1 	.word	0x000022e1

00002364 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    2364:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2366:	4b12      	ldr	r3, [pc, #72]	; (23b0 <prvInsertBlockIntoFreeList+0x4c>)
    2368:	681a      	ldr	r2, [r3, #0]
    236a:	4282      	cmp	r2, r0
    236c:	d319      	bcc.n	23a2 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    236e:	685c      	ldr	r4, [r3, #4]
    2370:	1919      	adds	r1, r3, r4
    2372:	4288      	cmp	r0, r1
    2374:	d103      	bne.n	237e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2376:	6841      	ldr	r1, [r0, #4]
    2378:	1909      	adds	r1, r1, r4
    237a:	6059      	str	r1, [r3, #4]
    237c:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    237e:	6841      	ldr	r1, [r0, #4]
    2380:	1844      	adds	r4, r0, r1
    2382:	42a2      	cmp	r2, r4
    2384:	d111      	bne.n	23aa <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    2386:	4c0b      	ldr	r4, [pc, #44]	; (23b4 <prvInsertBlockIntoFreeList+0x50>)
    2388:	6824      	ldr	r4, [r4, #0]
    238a:	42a2      	cmp	r2, r4
    238c:	d00b      	beq.n	23a6 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    238e:	6852      	ldr	r2, [r2, #4]
    2390:	1852      	adds	r2, r2, r1
    2392:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    2394:	681a      	ldr	r2, [r3, #0]
    2396:	6812      	ldr	r2, [r2, #0]
    2398:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    239a:	4298      	cmp	r0, r3
    239c:	d000      	beq.n	23a0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    239e:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    23a0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    23a2:	0013      	movs	r3, r2
    23a4:	e7e0      	b.n	2368 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    23a6:	6002      	str	r2, [r0, #0]
    23a8:	e7f7      	b.n	239a <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    23aa:	6002      	str	r2, [r0, #0]
    23ac:	e7f5      	b.n	239a <prvInsertBlockIntoFreeList+0x36>
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	20003eb4 	.word	0x20003eb4
    23b4:	20000024 	.word	0x20000024

000023b8 <pvPortMalloc>:
{
    23b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23ba:	0004      	movs	r4, r0
	vTaskSuspendAll();
    23bc:	4b3f      	ldr	r3, [pc, #252]	; (24bc <pvPortMalloc+0x104>)
    23be:	4798      	blx	r3
		if( pxEnd == NULL )
    23c0:	4b3f      	ldr	r3, [pc, #252]	; (24c0 <pvPortMalloc+0x108>)
    23c2:	681b      	ldr	r3, [r3, #0]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d015      	beq.n	23f4 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    23c8:	4b3e      	ldr	r3, [pc, #248]	; (24c4 <pvPortMalloc+0x10c>)
    23ca:	681f      	ldr	r7, [r3, #0]
    23cc:	423c      	tst	r4, r7
    23ce:	d16a      	bne.n	24a6 <pvPortMalloc+0xee>
			if( xWantedSize > 0 )
    23d0:	2c00      	cmp	r4, #0
    23d2:	d06b      	beq.n	24ac <pvPortMalloc+0xf4>
				xWantedSize += xHeapStructSize;
    23d4:	0023      	movs	r3, r4
    23d6:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    23d8:	075a      	lsls	r2, r3, #29
    23da:	d002      	beq.n	23e2 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    23dc:	2207      	movs	r2, #7
    23de:	4393      	bics	r3, r2
    23e0:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    23e2:	2b00      	cmp	r3, #0
    23e4:	d05f      	beq.n	24a6 <pvPortMalloc+0xee>
    23e6:	4a38      	ldr	r2, [pc, #224]	; (24c8 <pvPortMalloc+0x110>)
    23e8:	6816      	ldr	r6, [r2, #0]
    23ea:	42b3      	cmp	r3, r6
    23ec:	d85b      	bhi.n	24a6 <pvPortMalloc+0xee>
				pxBlock = xStart.pxNextFreeBlock;
    23ee:	4a37      	ldr	r2, [pc, #220]	; (24cc <pvPortMalloc+0x114>)
    23f0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    23f2:	e027      	b.n	2444 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
    23f4:	4a36      	ldr	r2, [pc, #216]	; (24d0 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    23f6:	0753      	lsls	r3, r2, #29
    23f8:	d01f      	beq.n	243a <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    23fa:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    23fc:	2307      	movs	r3, #7
    23fe:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    2400:	23fa      	movs	r3, #250	; 0xfa
    2402:	019b      	lsls	r3, r3, #6
    2404:	18d3      	adds	r3, r2, r3
    2406:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    2408:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    240a:	4830      	ldr	r0, [pc, #192]	; (24cc <pvPortMalloc+0x114>)
    240c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
    240e:	2100      	movs	r1, #0
    2410:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    2412:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
    2414:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    2416:	2007      	movs	r0, #7
    2418:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
    241a:	4829      	ldr	r0, [pc, #164]	; (24c0 <pvPortMalloc+0x108>)
    241c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
    241e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    2420:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    2422:	1a99      	subs	r1, r3, r2
    2424:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    2426:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2428:	4b2a      	ldr	r3, [pc, #168]	; (24d4 <pvPortMalloc+0x11c>)
    242a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    242c:	4b26      	ldr	r3, [pc, #152]	; (24c8 <pvPortMalloc+0x110>)
    242e:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2430:	2280      	movs	r2, #128	; 0x80
    2432:	0612      	lsls	r2, r2, #24
    2434:	4b23      	ldr	r3, [pc, #140]	; (24c4 <pvPortMalloc+0x10c>)
    2436:	601a      	str	r2, [r3, #0]
    2438:	e7c6      	b.n	23c8 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    243a:	23fa      	movs	r3, #250	; 0xfa
    243c:	019b      	lsls	r3, r3, #6
    243e:	e7e4      	b.n	240a <pvPortMalloc+0x52>
    2440:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
    2442:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2444:	6861      	ldr	r1, [r4, #4]
    2446:	428b      	cmp	r3, r1
    2448:	d902      	bls.n	2450 <pvPortMalloc+0x98>
    244a:	6821      	ldr	r1, [r4, #0]
    244c:	2900      	cmp	r1, #0
    244e:	d1f7      	bne.n	2440 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
    2450:	491b      	ldr	r1, [pc, #108]	; (24c0 <pvPortMalloc+0x108>)
    2452:	6809      	ldr	r1, [r1, #0]
    2454:	428c      	cmp	r4, r1
    2456:	d026      	beq.n	24a6 <pvPortMalloc+0xee>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    2458:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    245a:	6821      	ldr	r1, [r4, #0]
    245c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    245e:	6862      	ldr	r2, [r4, #4]
    2460:	1ad2      	subs	r2, r2, r3
    2462:	2a10      	cmp	r2, #16
    2464:	d908      	bls.n	2478 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2466:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    2468:	0741      	lsls	r1, r0, #29
    246a:	d001      	beq.n	2470 <pvPortMalloc+0xb8>
    246c:	b672      	cpsid	i
    246e:	e7fe      	b.n	246e <pvPortMalloc+0xb6>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2470:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
    2472:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    2474:	4b18      	ldr	r3, [pc, #96]	; (24d8 <pvPortMalloc+0x120>)
    2476:	4798      	blx	r3
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    2478:	6862      	ldr	r2, [r4, #4]
    247a:	1ab6      	subs	r6, r6, r2
    247c:	4912      	ldr	r1, [pc, #72]	; (24c8 <pvPortMalloc+0x110>)
    247e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    2480:	4914      	ldr	r1, [pc, #80]	; (24d4 <pvPortMalloc+0x11c>)
    2482:	6809      	ldr	r1, [r1, #0]
    2484:	428e      	cmp	r6, r1
    2486:	d201      	bcs.n	248c <pvPortMalloc+0xd4>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    2488:	4912      	ldr	r1, [pc, #72]	; (24d4 <pvPortMalloc+0x11c>)
    248a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    248c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    248e:	4317      	orrs	r7, r2
    2490:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
    2492:	2300      	movs	r3, #0
    2494:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
    2496:	4b11      	ldr	r3, [pc, #68]	; (24dc <pvPortMalloc+0x124>)
    2498:	4798      	blx	r3
		if( pvReturn == NULL )
    249a:	2d00      	cmp	r5, #0
    249c:	d008      	beq.n	24b0 <pvPortMalloc+0xf8>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    249e:	076b      	lsls	r3, r5, #29
    24a0:	d009      	beq.n	24b6 <pvPortMalloc+0xfe>
    24a2:	b672      	cpsid	i
    24a4:	e7fe      	b.n	24a4 <pvPortMalloc+0xec>
	( void ) xTaskResumeAll();
    24a6:	4b0d      	ldr	r3, [pc, #52]	; (24dc <pvPortMalloc+0x124>)
    24a8:	4798      	blx	r3
    24aa:	e001      	b.n	24b0 <pvPortMalloc+0xf8>
    24ac:	4b0b      	ldr	r3, [pc, #44]	; (24dc <pvPortMalloc+0x124>)
    24ae:	4798      	blx	r3
			vApplicationMallocFailedHook();
    24b0:	4b0b      	ldr	r3, [pc, #44]	; (24e0 <pvPortMalloc+0x128>)
    24b2:	4798      	blx	r3
    24b4:	2500      	movs	r5, #0
}
    24b6:	0028      	movs	r0, r5
    24b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00002fe9 	.word	0x00002fe9
    24c0:	20000024 	.word	0x20000024
    24c4:	20003ea8 	.word	0x20003ea8
    24c8:	20003eac 	.word	0x20003eac
    24cc:	20003eb4 	.word	0x20003eb4
    24d0:	20000028 	.word	0x20000028
    24d4:	20003eb0 	.word	0x20003eb0
    24d8:	00002365 	.word	0x00002365
    24dc:	00003149 	.word	0x00003149
    24e0:	00003a99 	.word	0x00003a99

000024e4 <vPortFree>:
{
    24e4:	b510      	push	{r4, lr}
	if( pv != NULL )
    24e6:	2800      	cmp	r0, #0
    24e8:	d020      	beq.n	252c <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    24ea:	0003      	movs	r3, r0
    24ec:	3b08      	subs	r3, #8
    24ee:	685b      	ldr	r3, [r3, #4]
    24f0:	4a0f      	ldr	r2, [pc, #60]	; (2530 <vPortFree+0x4c>)
    24f2:	6812      	ldr	r2, [r2, #0]
    24f4:	421a      	tst	r2, r3
    24f6:	d101      	bne.n	24fc <vPortFree+0x18>
    24f8:	b672      	cpsid	i
    24fa:	e7fe      	b.n	24fa <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    24fc:	0001      	movs	r1, r0
    24fe:	3908      	subs	r1, #8
    2500:	6809      	ldr	r1, [r1, #0]
    2502:	2900      	cmp	r1, #0
    2504:	d001      	beq.n	250a <vPortFree+0x26>
    2506:	b672      	cpsid	i
    2508:	e7fe      	b.n	2508 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    250a:	3808      	subs	r0, #8
    250c:	0004      	movs	r4, r0
    250e:	4393      	bics	r3, r2
    2510:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
    2512:	4b08      	ldr	r3, [pc, #32]	; (2534 <vPortFree+0x50>)
    2514:	4798      	blx	r3
					xFreeBytesRemaining += pxLink->xBlockSize;
    2516:	4a08      	ldr	r2, [pc, #32]	; (2538 <vPortFree+0x54>)
    2518:	6863      	ldr	r3, [r4, #4]
    251a:	6811      	ldr	r1, [r2, #0]
    251c:	468c      	mov	ip, r1
    251e:	4463      	add	r3, ip
    2520:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    2522:	0020      	movs	r0, r4
    2524:	4b05      	ldr	r3, [pc, #20]	; (253c <vPortFree+0x58>)
    2526:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2528:	4b05      	ldr	r3, [pc, #20]	; (2540 <vPortFree+0x5c>)
    252a:	4798      	blx	r3
}
    252c:	bd10      	pop	{r4, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	20003ea8 	.word	0x20003ea8
    2534:	00002fe9 	.word	0x00002fe9
    2538:	20003eac 	.word	0x20003eac
    253c:	00002365 	.word	0x00002365
    2540:	00003149 	.word	0x00003149

00002544 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2544:	b510      	push	{r4, lr}
    2546:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2548:	4b03      	ldr	r3, [pc, #12]	; (2558 <prvIsQueueEmpty+0x14>)
    254a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    254c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    254e:	4b03      	ldr	r3, [pc, #12]	; (255c <prvIsQueueEmpty+0x18>)
    2550:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2552:	4260      	negs	r0, r4
    2554:	4160      	adcs	r0, r4

	return xReturn;
}
    2556:	bd10      	pop	{r4, pc}
    2558:	000022a1 	.word	0x000022a1
    255c:	000022b9 	.word	0x000022b9

00002560 <prvCopyDataToQueue>:
{
    2560:	b570      	push	{r4, r5, r6, lr}
    2562:	0004      	movs	r4, r0
    2564:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2566:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2568:	6c02      	ldr	r2, [r0, #64]	; 0x40
    256a:	2a00      	cmp	r2, #0
    256c:	d10b      	bne.n	2586 <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    256e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2570:	6823      	ldr	r3, [r4, #0]
    2572:	4283      	cmp	r3, r0
    2574:	d104      	bne.n	2580 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    2576:	68a0      	ldr	r0, [r4, #8]
    2578:	4b16      	ldr	r3, [pc, #88]	; (25d4 <prvCopyDataToQueue+0x74>)
    257a:	4798      	blx	r3
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    257c:	2300      	movs	r3, #0
    257e:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    2580:	3501      	adds	r5, #1
    2582:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2584:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    2586:	2e00      	cmp	r6, #0
    2588:	d10e      	bne.n	25a8 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    258a:	6840      	ldr	r0, [r0, #4]
    258c:	4b12      	ldr	r3, [pc, #72]	; (25d8 <prvCopyDataToQueue+0x78>)
    258e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    2590:	6863      	ldr	r3, [r4, #4]
    2592:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2594:	4694      	mov	ip, r2
    2596:	4463      	add	r3, ip
    2598:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
    259a:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    259c:	68a2      	ldr	r2, [r4, #8]
    259e:	4293      	cmp	r3, r2
    25a0:	d3ee      	bcc.n	2580 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    25a2:	6823      	ldr	r3, [r4, #0]
    25a4:	6063      	str	r3, [r4, #4]
    25a6:	e7eb      	b.n	2580 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    25a8:	68c0      	ldr	r0, [r0, #12]
    25aa:	4b0b      	ldr	r3, [pc, #44]	; (25d8 <prvCopyDataToQueue+0x78>)
    25ac:	4798      	blx	r3
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    25ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    25b0:	425b      	negs	r3, r3
    25b2:	68e2      	ldr	r2, [r4, #12]
    25b4:	18d2      	adds	r2, r2, r3
    25b6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    25b8:	6821      	ldr	r1, [r4, #0]
    25ba:	428a      	cmp	r2, r1
    25bc:	d203      	bcs.n	25c6 <prvCopyDataToQueue+0x66>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    25be:	68a2      	ldr	r2, [r4, #8]
    25c0:	4694      	mov	ip, r2
    25c2:	4463      	add	r3, ip
    25c4:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    25c6:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    25c8:	2e02      	cmp	r6, #2
    25ca:	d1d9      	bne.n	2580 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    25cc:	4285      	cmp	r5, r0
    25ce:	d0d7      	beq.n	2580 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    25d0:	3d01      	subs	r5, #1
    25d2:	e7d5      	b.n	2580 <prvCopyDataToQueue+0x20>
    25d4:	00003521 	.word	0x00003521
    25d8:	0000410d 	.word	0x0000410d

000025dc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    25dc:	b570      	push	{r4, r5, r6, lr}
    25de:	b082      	sub	sp, #8
    25e0:	9001      	str	r0, [sp, #4]
    25e2:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    25e4:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    25e6:	2c00      	cmp	r4, #0
    25e8:	d005      	beq.n	25f6 <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    25ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    25ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    25ee:	4299      	cmp	r1, r3
    25f0:	d303      	bcc.n	25fa <prvNotifyQueueSetContainer+0x1e>
    25f2:	b672      	cpsid	i
    25f4:	e7fe      	b.n	25f4 <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    25f6:	b672      	cpsid	i
    25f8:	e7fe      	b.n	25f8 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    25fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    25fc:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    25fe:	428b      	cmp	r3, r1
    2600:	d802      	bhi.n	2608 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    2602:	0030      	movs	r0, r6
    2604:	b002      	add	sp, #8
    2606:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    2608:	2345      	movs	r3, #69	; 0x45
    260a:	5ce5      	ldrb	r5, [r4, r3]
    260c:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    260e:	a901      	add	r1, sp, #4
    2610:	0020      	movs	r0, r4
    2612:	4b0a      	ldr	r3, [pc, #40]	; (263c <prvNotifyQueueSetContainer+0x60>)
    2614:	4798      	blx	r3
    2616:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    2618:	1c6b      	adds	r3, r5, #1
    261a:	d10a      	bne.n	2632 <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    261e:	2b00      	cmp	r3, #0
    2620:	d0ef      	beq.n	2602 <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    2622:	0020      	movs	r0, r4
    2624:	3024      	adds	r0, #36	; 0x24
    2626:	4b06      	ldr	r3, [pc, #24]	; (2640 <prvNotifyQueueSetContainer+0x64>)
    2628:	4798      	blx	r3
    262a:	2800      	cmp	r0, #0
    262c:	d0e9      	beq.n	2602 <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    262e:	2601      	movs	r6, #1
    2630:	e7e7      	b.n	2602 <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2632:	3501      	adds	r5, #1
    2634:	b26d      	sxtb	r5, r5
    2636:	2345      	movs	r3, #69	; 0x45
    2638:	54e5      	strb	r5, [r4, r3]
    263a:	e7e2      	b.n	2602 <prvNotifyQueueSetContainer+0x26>
    263c:	00002561 	.word	0x00002561
    2640:	000033e5 	.word	0x000033e5

00002644 <prvCopyDataFromQueue>:
{
    2644:	b510      	push	{r4, lr}
    2646:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    2648:	6c02      	ldr	r2, [r0, #64]	; 0x40
    264a:	2a00      	cmp	r2, #0
    264c:	d00b      	beq.n	2666 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    264e:	68c3      	ldr	r3, [r0, #12]
    2650:	189b      	adds	r3, r3, r2
    2652:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2654:	6881      	ldr	r1, [r0, #8]
    2656:	428b      	cmp	r3, r1
    2658:	d301      	bcc.n	265e <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    265a:	6803      	ldr	r3, [r0, #0]
    265c:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    265e:	68c1      	ldr	r1, [r0, #12]
    2660:	0020      	movs	r0, r4
    2662:	4b01      	ldr	r3, [pc, #4]	; (2668 <prvCopyDataFromQueue+0x24>)
    2664:	4798      	blx	r3
}
    2666:	bd10      	pop	{r4, pc}
    2668:	0000410d 	.word	0x0000410d

0000266c <prvUnlockQueue>:
{
    266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    266e:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    2670:	4b25      	ldr	r3, [pc, #148]	; (2708 <prvUnlockQueue+0x9c>)
    2672:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2674:	2345      	movs	r3, #69	; 0x45
    2676:	5cfc      	ldrb	r4, [r7, r3]
    2678:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    267a:	2c00      	cmp	r4, #0
    267c:	dd1c      	ble.n	26b8 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    267e:	4e23      	ldr	r6, [pc, #140]	; (270c <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2680:	4d23      	ldr	r5, [pc, #140]	; (2710 <prvUnlockQueue+0xa4>)
    2682:	e00b      	b.n	269c <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2686:	2b00      	cmp	r3, #0
    2688:	d016      	beq.n	26b8 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    268a:	0038      	movs	r0, r7
    268c:	3024      	adds	r0, #36	; 0x24
    268e:	47a8      	blx	r5
    2690:	2800      	cmp	r0, #0
    2692:	d10e      	bne.n	26b2 <prvUnlockQueue+0x46>
    2694:	3c01      	subs	r4, #1
    2696:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    2698:	2c00      	cmp	r4, #0
    269a:	d00d      	beq.n	26b8 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    269c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    269e:	2b00      	cmp	r3, #0
    26a0:	d0f0      	beq.n	2684 <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    26a2:	2100      	movs	r1, #0
    26a4:	0038      	movs	r0, r7
    26a6:	47b0      	blx	r6
    26a8:	2800      	cmp	r0, #0
    26aa:	d0f3      	beq.n	2694 <prvUnlockQueue+0x28>
						vTaskMissedYield();
    26ac:	4b19      	ldr	r3, [pc, #100]	; (2714 <prvUnlockQueue+0xa8>)
    26ae:	4798      	blx	r3
    26b0:	e7f0      	b.n	2694 <prvUnlockQueue+0x28>
							vTaskMissedYield();
    26b2:	4b18      	ldr	r3, [pc, #96]	; (2714 <prvUnlockQueue+0xa8>)
    26b4:	4798      	blx	r3
    26b6:	e7ed      	b.n	2694 <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    26b8:	22ff      	movs	r2, #255	; 0xff
    26ba:	2345      	movs	r3, #69	; 0x45
    26bc:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    26be:	4b16      	ldr	r3, [pc, #88]	; (2718 <prvUnlockQueue+0xac>)
    26c0:	4798      	blx	r3
	taskENTER_CRITICAL();
    26c2:	4b11      	ldr	r3, [pc, #68]	; (2708 <prvUnlockQueue+0x9c>)
    26c4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    26c6:	2344      	movs	r3, #68	; 0x44
    26c8:	5cfc      	ldrb	r4, [r7, r3]
    26ca:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    26cc:	2c00      	cmp	r4, #0
    26ce:	dd14      	ble.n	26fa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    26d0:	693b      	ldr	r3, [r7, #16]
    26d2:	2b00      	cmp	r3, #0
    26d4:	d011      	beq.n	26fa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    26d6:	003d      	movs	r5, r7
    26d8:	3510      	adds	r5, #16
    26da:	4e0d      	ldr	r6, [pc, #52]	; (2710 <prvUnlockQueue+0xa4>)
    26dc:	e006      	b.n	26ec <prvUnlockQueue+0x80>
    26de:	3c01      	subs	r4, #1
    26e0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    26e2:	2c00      	cmp	r4, #0
    26e4:	d009      	beq.n	26fa <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    26e6:	693b      	ldr	r3, [r7, #16]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d006      	beq.n	26fa <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    26ec:	0028      	movs	r0, r5
    26ee:	47b0      	blx	r6
    26f0:	2800      	cmp	r0, #0
    26f2:	d0f4      	beq.n	26de <prvUnlockQueue+0x72>
					vTaskMissedYield();
    26f4:	4b07      	ldr	r3, [pc, #28]	; (2714 <prvUnlockQueue+0xa8>)
    26f6:	4798      	blx	r3
    26f8:	e7f1      	b.n	26de <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    26fa:	22ff      	movs	r2, #255	; 0xff
    26fc:	2344      	movs	r3, #68	; 0x44
    26fe:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    2700:	4b05      	ldr	r3, [pc, #20]	; (2718 <prvUnlockQueue+0xac>)
    2702:	4798      	blx	r3
}
    2704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	000022a1 	.word	0x000022a1
    270c:	000025dd 	.word	0x000025dd
    2710:	000033e5 	.word	0x000033e5
    2714:	000034f5 	.word	0x000034f5
    2718:	000022b9 	.word	0x000022b9

0000271c <xQueueGenericReset>:
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	0004      	movs	r4, r0
    2720:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    2722:	2800      	cmp	r0, #0
    2724:	d021      	beq.n	276a <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    2726:	4b17      	ldr	r3, [pc, #92]	; (2784 <xQueueGenericReset+0x68>)
    2728:	4798      	blx	r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    272a:	6822      	ldr	r2, [r4, #0]
    272c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    272e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2730:	434b      	muls	r3, r1
    2732:	18d0      	adds	r0, r2, r3
    2734:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    2736:	2000      	movs	r0, #0
    2738:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    273a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    273c:	1a5b      	subs	r3, r3, r1
    273e:	18d3      	adds	r3, r2, r3
    2740:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    2742:	23ff      	movs	r3, #255	; 0xff
    2744:	2244      	movs	r2, #68	; 0x44
    2746:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    2748:	3201      	adds	r2, #1
    274a:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    274c:	2d00      	cmp	r5, #0
    274e:	d111      	bne.n	2774 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2750:	6923      	ldr	r3, [r4, #16]
    2752:	2b00      	cmp	r3, #0
    2754:	d005      	beq.n	2762 <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2756:	0020      	movs	r0, r4
    2758:	3010      	adds	r0, #16
    275a:	4b0b      	ldr	r3, [pc, #44]	; (2788 <xQueueGenericReset+0x6c>)
    275c:	4798      	blx	r3
    275e:	2800      	cmp	r0, #0
    2760:	d105      	bne.n	276e <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    2762:	4b0a      	ldr	r3, [pc, #40]	; (278c <xQueueGenericReset+0x70>)
    2764:	4798      	blx	r3
}
    2766:	2001      	movs	r0, #1
    2768:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    276a:	b672      	cpsid	i
    276c:	e7fe      	b.n	276c <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    276e:	4b08      	ldr	r3, [pc, #32]	; (2790 <xQueueGenericReset+0x74>)
    2770:	4798      	blx	r3
    2772:	e7f6      	b.n	2762 <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2774:	0020      	movs	r0, r4
    2776:	3010      	adds	r0, #16
    2778:	4d06      	ldr	r5, [pc, #24]	; (2794 <xQueueGenericReset+0x78>)
    277a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    277c:	0020      	movs	r0, r4
    277e:	3024      	adds	r0, #36	; 0x24
    2780:	47a8      	blx	r5
    2782:	e7ee      	b.n	2762 <xQueueGenericReset+0x46>
    2784:	000022a1 	.word	0x000022a1
    2788:	000033e5 	.word	0x000033e5
    278c:	000022b9 	.word	0x000022b9
    2790:	00002289 	.word	0x00002289
    2794:	00002115 	.word	0x00002115

00002798 <xQueueGenericCreate>:
	{
    2798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    279a:	0006      	movs	r6, r0
    279c:	000d      	movs	r5, r1
    279e:	0017      	movs	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    27a0:	2800      	cmp	r0, #0
    27a2:	d101      	bne.n	27a8 <xQueueGenericCreate+0x10>
    27a4:	b672      	cpsid	i
    27a6:	e7fe      	b.n	27a6 <xQueueGenericCreate+0xe>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    27a8:	0008      	movs	r0, r1
    27aa:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    27ac:	3054      	adds	r0, #84	; 0x54
    27ae:	4b0b      	ldr	r3, [pc, #44]	; (27dc <xQueueGenericCreate+0x44>)
    27b0:	4798      	blx	r3
    27b2:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    27b4:	d010      	beq.n	27d8 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
    27b6:	2d00      	cmp	r5, #0
    27b8:	d003      	beq.n	27c2 <xQueueGenericCreate+0x2a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    27ba:	0003      	movs	r3, r0
    27bc:	3354      	adds	r3, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    27be:	6003      	str	r3, [r0, #0]
    27c0:	e000      	b.n	27c4 <xQueueGenericCreate+0x2c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    27c2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    27c4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    27c6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    27c8:	2101      	movs	r1, #1
    27ca:	0020      	movs	r0, r4
    27cc:	4b04      	ldr	r3, [pc, #16]	; (27e0 <xQueueGenericCreate+0x48>)
    27ce:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    27d0:	2350      	movs	r3, #80	; 0x50
    27d2:	54e7      	strb	r7, [r4, r3]
		pxNewQueue->pxQueueSetContainer = NULL;
    27d4:	2300      	movs	r3, #0
    27d6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    27d8:	0020      	movs	r0, r4
    27da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27dc:	000023b9 	.word	0x000023b9
    27e0:	0000271d 	.word	0x0000271d

000027e4 <xQueueGenericSend>:
{
    27e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27e6:	46ce      	mov	lr, r9
    27e8:	4647      	mov	r7, r8
    27ea:	b580      	push	{r7, lr}
    27ec:	b085      	sub	sp, #20
    27ee:	0004      	movs	r4, r0
    27f0:	000e      	movs	r6, r1
    27f2:	9201      	str	r2, [sp, #4]
    27f4:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    27f6:	2800      	cmp	r0, #0
    27f8:	d00c      	beq.n	2814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    27fa:	2900      	cmp	r1, #0
    27fc:	d00c      	beq.n	2818 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    27fe:	2d02      	cmp	r5, #2
    2800:	d00f      	beq.n	2822 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2802:	4b56      	ldr	r3, [pc, #344]	; (295c <xQueueGenericSend+0x178>)
    2804:	4798      	blx	r3
    2806:	2800      	cmp	r0, #0
    2808:	d110      	bne.n	282c <xQueueGenericSend+0x48>
    280a:	9b01      	ldr	r3, [sp, #4]
    280c:	2b00      	cmp	r3, #0
    280e:	d011      	beq.n	2834 <xQueueGenericSend+0x50>
    2810:	b672      	cpsid	i
    2812:	e7fe      	b.n	2812 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    2814:	b672      	cpsid	i
    2816:	e7fe      	b.n	2816 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2818:	6c03      	ldr	r3, [r0, #64]	; 0x40
    281a:	2b00      	cmp	r3, #0
    281c:	d0ef      	beq.n	27fe <xQueueGenericSend+0x1a>
    281e:	b672      	cpsid	i
    2820:	e7fe      	b.n	2820 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    2822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2824:	2b01      	cmp	r3, #1
    2826:	d0ec      	beq.n	2802 <xQueueGenericSend+0x1e>
    2828:	b672      	cpsid	i
    282a:	e7fe      	b.n	282a <xQueueGenericSend+0x46>
    282c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    282e:	4b4c      	ldr	r3, [pc, #304]	; (2960 <xQueueGenericSend+0x17c>)
    2830:	4698      	mov	r8, r3
    2832:	e046      	b.n	28c2 <xQueueGenericSend+0xde>
    2834:	2700      	movs	r7, #0
    2836:	e7fa      	b.n	282e <xQueueGenericSend+0x4a>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    2838:	6ba7      	ldr	r7, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    283a:	002a      	movs	r2, r5
    283c:	0031      	movs	r1, r6
    283e:	0020      	movs	r0, r4
    2840:	4b48      	ldr	r3, [pc, #288]	; (2964 <xQueueGenericSend+0x180>)
    2842:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    2844:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2846:	2b00      	cmp	r3, #0
    2848:	d100      	bne.n	284c <xQueueGenericSend+0x68>
    284a:	e07a      	b.n	2942 <xQueueGenericSend+0x15e>
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
    284c:	2d02      	cmp	r5, #2
    284e:	d101      	bne.n	2854 <xQueueGenericSend+0x70>
    2850:	2f00      	cmp	r7, #0
    2852:	d107      	bne.n	2864 <xQueueGenericSend+0x80>
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2854:	0029      	movs	r1, r5
    2856:	0020      	movs	r0, r4
    2858:	4b43      	ldr	r3, [pc, #268]	; (2968 <xQueueGenericSend+0x184>)
    285a:	4798      	blx	r3
    285c:	2800      	cmp	r0, #0
    285e:	d001      	beq.n	2864 <xQueueGenericSend+0x80>
							queueYIELD_IF_USING_PREEMPTION();
    2860:	4b42      	ldr	r3, [pc, #264]	; (296c <xQueueGenericSend+0x188>)
    2862:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2864:	4b42      	ldr	r3, [pc, #264]	; (2970 <xQueueGenericSend+0x18c>)
    2866:	4798      	blx	r3
				return pdPASS;
    2868:	2001      	movs	r0, #1
}
    286a:	b005      	add	sp, #20
    286c:	bc0c      	pop	{r2, r3}
    286e:	4690      	mov	r8, r2
    2870:	4699      	mov	r9, r3
    2872:	bdf0      	pop	{r4, r5, r6, r7, pc}
						else if( xYieldRequired != pdFALSE )
    2874:	2800      	cmp	r0, #0
    2876:	d0f5      	beq.n	2864 <xQueueGenericSend+0x80>
							queueYIELD_IF_USING_PREEMPTION();
    2878:	4b3c      	ldr	r3, [pc, #240]	; (296c <xQueueGenericSend+0x188>)
    287a:	4798      	blx	r3
    287c:	e7f2      	b.n	2864 <xQueueGenericSend+0x80>
					taskEXIT_CRITICAL();
    287e:	4b3c      	ldr	r3, [pc, #240]	; (2970 <xQueueGenericSend+0x18c>)
    2880:	4798      	blx	r3
					return errQUEUE_FULL;
    2882:	2000      	movs	r0, #0
    2884:	e7f1      	b.n	286a <xQueueGenericSend+0x86>
		prvLockQueue( pxQueue );
    2886:	4b3a      	ldr	r3, [pc, #232]	; (2970 <xQueueGenericSend+0x18c>)
    2888:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    288a:	a901      	add	r1, sp, #4
    288c:	a802      	add	r0, sp, #8
    288e:	4b39      	ldr	r3, [pc, #228]	; (2974 <xQueueGenericSend+0x190>)
    2890:	4798      	blx	r3
    2892:	2800      	cmp	r0, #0
    2894:	d144      	bne.n	2920 <xQueueGenericSend+0x13c>
	taskENTER_CRITICAL();
    2896:	4b32      	ldr	r3, [pc, #200]	; (2960 <xQueueGenericSend+0x17c>)
    2898:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    289a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    289c:	4699      	mov	r9, r3
    289e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    28a0:	4b33      	ldr	r3, [pc, #204]	; (2970 <xQueueGenericSend+0x18c>)
    28a2:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    28a4:	45b9      	cmp	r9, r7
    28a6:	d135      	bne.n	2914 <xQueueGenericSend+0x130>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    28a8:	0020      	movs	r0, r4
    28aa:	3010      	adds	r0, #16
    28ac:	9901      	ldr	r1, [sp, #4]
    28ae:	4b32      	ldr	r3, [pc, #200]	; (2978 <xQueueGenericSend+0x194>)
    28b0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    28b2:	0020      	movs	r0, r4
    28b4:	4b31      	ldr	r3, [pc, #196]	; (297c <xQueueGenericSend+0x198>)
    28b6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    28b8:	4b31      	ldr	r3, [pc, #196]	; (2980 <xQueueGenericSend+0x19c>)
    28ba:	4798      	blx	r3
    28bc:	2800      	cmp	r0, #0
    28be:	d026      	beq.n	290e <xQueueGenericSend+0x12a>
    28c0:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    28c2:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    28c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    28c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    28c8:	4293      	cmp	r3, r2
    28ca:	d3b5      	bcc.n	2838 <xQueueGenericSend+0x54>
    28cc:	2d02      	cmp	r5, #2
    28ce:	d02e      	beq.n	292e <xQueueGenericSend+0x14a>
				if( xTicksToWait == ( TickType_t ) 0 )
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d0d3      	beq.n	287e <xQueueGenericSend+0x9a>
				else if( xEntryTimeSet == pdFALSE )
    28d6:	2f00      	cmp	r7, #0
    28d8:	d102      	bne.n	28e0 <xQueueGenericSend+0xfc>
					vTaskInternalSetTimeOutState( &xTimeOut );
    28da:	a802      	add	r0, sp, #8
    28dc:	4b29      	ldr	r3, [pc, #164]	; (2984 <xQueueGenericSend+0x1a0>)
    28de:	4798      	blx	r3
		taskEXIT_CRITICAL();
    28e0:	4b23      	ldr	r3, [pc, #140]	; (2970 <xQueueGenericSend+0x18c>)
    28e2:	4798      	blx	r3
		vTaskSuspendAll();
    28e4:	4b28      	ldr	r3, [pc, #160]	; (2988 <xQueueGenericSend+0x1a4>)
    28e6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    28e8:	4b1d      	ldr	r3, [pc, #116]	; (2960 <xQueueGenericSend+0x17c>)
    28ea:	4798      	blx	r3
    28ec:	2344      	movs	r3, #68	; 0x44
    28ee:	5ce3      	ldrb	r3, [r4, r3]
    28f0:	b25b      	sxtb	r3, r3
    28f2:	3301      	adds	r3, #1
    28f4:	d102      	bne.n	28fc <xQueueGenericSend+0x118>
    28f6:	2200      	movs	r2, #0
    28f8:	2344      	movs	r3, #68	; 0x44
    28fa:	54e2      	strb	r2, [r4, r3]
    28fc:	2345      	movs	r3, #69	; 0x45
    28fe:	5ce3      	ldrb	r3, [r4, r3]
    2900:	b25b      	sxtb	r3, r3
    2902:	3301      	adds	r3, #1
    2904:	d1bf      	bne.n	2886 <xQueueGenericSend+0xa2>
    2906:	2200      	movs	r2, #0
    2908:	2345      	movs	r3, #69	; 0x45
    290a:	54e2      	strb	r2, [r4, r3]
    290c:	e7bb      	b.n	2886 <xQueueGenericSend+0xa2>
					portYIELD_WITHIN_API();
    290e:	4b17      	ldr	r3, [pc, #92]	; (296c <xQueueGenericSend+0x188>)
    2910:	4798      	blx	r3
    2912:	e7d5      	b.n	28c0 <xQueueGenericSend+0xdc>
				prvUnlockQueue( pxQueue );
    2914:	0020      	movs	r0, r4
    2916:	4b19      	ldr	r3, [pc, #100]	; (297c <xQueueGenericSend+0x198>)
    2918:	4798      	blx	r3
				( void ) xTaskResumeAll();
    291a:	4b19      	ldr	r3, [pc, #100]	; (2980 <xQueueGenericSend+0x19c>)
    291c:	4798      	blx	r3
    291e:	e7cf      	b.n	28c0 <xQueueGenericSend+0xdc>
			prvUnlockQueue( pxQueue );
    2920:	0020      	movs	r0, r4
    2922:	4b16      	ldr	r3, [pc, #88]	; (297c <xQueueGenericSend+0x198>)
    2924:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2926:	4b16      	ldr	r3, [pc, #88]	; (2980 <xQueueGenericSend+0x19c>)
    2928:	4798      	blx	r3
			return errQUEUE_FULL;
    292a:	2000      	movs	r0, #0
    292c:	e79d      	b.n	286a <xQueueGenericSend+0x86>
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    292e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2930:	2202      	movs	r2, #2
    2932:	0031      	movs	r1, r6
    2934:	0020      	movs	r0, r4
    2936:	4b0b      	ldr	r3, [pc, #44]	; (2964 <xQueueGenericSend+0x180>)
    2938:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    293a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    293c:	2b00      	cmp	r3, #0
    293e:	d000      	beq.n	2942 <xQueueGenericSend+0x15e>
    2940:	e786      	b.n	2850 <xQueueGenericSend+0x6c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2942:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2944:	2b00      	cmp	r3, #0
    2946:	d095      	beq.n	2874 <xQueueGenericSend+0x90>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2948:	0020      	movs	r0, r4
    294a:	3024      	adds	r0, #36	; 0x24
    294c:	4b0f      	ldr	r3, [pc, #60]	; (298c <xQueueGenericSend+0x1a8>)
    294e:	4798      	blx	r3
    2950:	2800      	cmp	r0, #0
    2952:	d100      	bne.n	2956 <xQueueGenericSend+0x172>
    2954:	e786      	b.n	2864 <xQueueGenericSend+0x80>
								queueYIELD_IF_USING_PREEMPTION();
    2956:	4b05      	ldr	r3, [pc, #20]	; (296c <xQueueGenericSend+0x188>)
    2958:	4798      	blx	r3
    295a:	e783      	b.n	2864 <xQueueGenericSend+0x80>
    295c:	00003501 	.word	0x00003501
    2960:	000022a1 	.word	0x000022a1
    2964:	00002561 	.word	0x00002561
    2968:	000025dd 	.word	0x000025dd
    296c:	00002289 	.word	0x00002289
    2970:	000022b9 	.word	0x000022b9
    2974:	00003485 	.word	0x00003485
    2978:	00003381 	.word	0x00003381
    297c:	0000266d 	.word	0x0000266d
    2980:	00003149 	.word	0x00003149
    2984:	0000346d 	.word	0x0000346d
    2988:	00002fe9 	.word	0x00002fe9
    298c:	000033e5 	.word	0x000033e5

00002990 <xQueueGenericSendFromISR>:
{
    2990:	b5f0      	push	{r4, r5, r6, r7, lr}
    2992:	b083      	sub	sp, #12
    2994:	0004      	movs	r4, r0
    2996:	9101      	str	r1, [sp, #4]
    2998:	0016      	movs	r6, r2
    299a:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    299c:	2800      	cmp	r0, #0
    299e:	d012      	beq.n	29c6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    29a0:	9b01      	ldr	r3, [sp, #4]
    29a2:	2b00      	cmp	r3, #0
    29a4:	d011      	beq.n	29ca <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    29a6:	2d02      	cmp	r5, #2
    29a8:	d014      	beq.n	29d4 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    29aa:	4b28      	ldr	r3, [pc, #160]	; (2a4c <xQueueGenericSendFromISR+0xbc>)
    29ac:	4798      	blx	r3
    29ae:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    29b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    29b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    29b4:	429a      	cmp	r2, r3
    29b6:	d82f      	bhi.n	2a18 <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    29b8:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    29ba:	9800      	ldr	r0, [sp, #0]
    29bc:	4b24      	ldr	r3, [pc, #144]	; (2a50 <xQueueGenericSendFromISR+0xc0>)
    29be:	4798      	blx	r3
}
    29c0:	0028      	movs	r0, r5
    29c2:	b003      	add	sp, #12
    29c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    29c6:	b672      	cpsid	i
    29c8:	e7fe      	b.n	29c8 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    29ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
    29cc:	2b00      	cmp	r3, #0
    29ce:	d0ea      	beq.n	29a6 <xQueueGenericSendFromISR+0x16>
    29d0:	b672      	cpsid	i
    29d2:	e7fe      	b.n	29d2 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    29d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    29d6:	2b01      	cmp	r3, #1
    29d8:	d01a      	beq.n	2a10 <xQueueGenericSendFromISR+0x80>
    29da:	b672      	cpsid	i
    29dc:	e7fe      	b.n	29dc <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29de:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    29e0:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    29e2:	2b00      	cmp	r3, #0
    29e4:	d0e9      	beq.n	29ba <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    29e6:	0020      	movs	r0, r4
    29e8:	3024      	adds	r0, #36	; 0x24
    29ea:	4b1a      	ldr	r3, [pc, #104]	; (2a54 <xQueueGenericSendFromISR+0xc4>)
    29ec:	4798      	blx	r3
    29ee:	2800      	cmp	r0, #0
    29f0:	d0e3      	beq.n	29ba <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    29f2:	2e00      	cmp	r6, #0
    29f4:	d00a      	beq.n	2a0c <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    29f6:	2301      	movs	r3, #1
    29f8:	6033      	str	r3, [r6, #0]
    29fa:	e7de      	b.n	29ba <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    29fc:	1c7b      	adds	r3, r7, #1
    29fe:	b25b      	sxtb	r3, r3
    2a00:	2245      	movs	r2, #69	; 0x45
    2a02:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    2a04:	2501      	movs	r5, #1
    2a06:	e7d8      	b.n	29ba <xQueueGenericSendFromISR+0x2a>
    2a08:	2501      	movs	r5, #1
    2a0a:	e7d6      	b.n	29ba <xQueueGenericSendFromISR+0x2a>
    2a0c:	2501      	movs	r5, #1
    2a0e:	e7d4      	b.n	29ba <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2a10:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <xQueueGenericSendFromISR+0xbc>)
    2a12:	4798      	blx	r3
    2a14:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    2a18:	2345      	movs	r3, #69	; 0x45
    2a1a:	5ce7      	ldrb	r7, [r4, r3]
    2a1c:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2a1e:	002a      	movs	r2, r5
    2a20:	9901      	ldr	r1, [sp, #4]
    2a22:	0020      	movs	r0, r4
    2a24:	4b0c      	ldr	r3, [pc, #48]	; (2a58 <xQueueGenericSendFromISR+0xc8>)
    2a26:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    2a28:	1c7b      	adds	r3, r7, #1
    2a2a:	d1e7      	bne.n	29fc <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    2a2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d0d5      	beq.n	29de <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2a32:	0029      	movs	r1, r5
    2a34:	0020      	movs	r0, r4
    2a36:	4b09      	ldr	r3, [pc, #36]	; (2a5c <xQueueGenericSendFromISR+0xcc>)
    2a38:	4798      	blx	r3
			xReturn = pdPASS;
    2a3a:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d0bc      	beq.n	29ba <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    2a40:	2e00      	cmp	r6, #0
    2a42:	d0e1      	beq.n	2a08 <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    2a44:	2301      	movs	r3, #1
    2a46:	6033      	str	r3, [r6, #0]
    2a48:	e7b7      	b.n	29ba <xQueueGenericSendFromISR+0x2a>
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	000022d9 	.word	0x000022d9
    2a50:	000022e1 	.word	0x000022e1
    2a54:	000033e5 	.word	0x000033e5
    2a58:	00002561 	.word	0x00002561
    2a5c:	000025dd 	.word	0x000025dd

00002a60 <xQueueReceive>:
{
    2a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a62:	46c6      	mov	lr, r8
    2a64:	b500      	push	{lr}
    2a66:	b084      	sub	sp, #16
    2a68:	0004      	movs	r4, r0
    2a6a:	000f      	movs	r7, r1
    2a6c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    2a6e:	2800      	cmp	r0, #0
    2a70:	d00a      	beq.n	2a88 <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2a72:	2900      	cmp	r1, #0
    2a74:	d00a      	beq.n	2a8c <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    2a76:	4b42      	ldr	r3, [pc, #264]	; (2b80 <xQueueReceive+0x120>)
    2a78:	4798      	blx	r3
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d10b      	bne.n	2a96 <xQueueReceive+0x36>
    2a7e:	9b01      	ldr	r3, [sp, #4]
    2a80:	2b00      	cmp	r3, #0
    2a82:	d00c      	beq.n	2a9e <xQueueReceive+0x3e>
    2a84:	b672      	cpsid	i
    2a86:	e7fe      	b.n	2a86 <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    2a88:	b672      	cpsid	i
    2a8a:	e7fe      	b.n	2a8a <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    2a8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d0f1      	beq.n	2a76 <xQueueReceive+0x16>
    2a92:	b672      	cpsid	i
    2a94:	e7fe      	b.n	2a94 <xQueueReceive+0x34>
    2a96:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    2a98:	4b3a      	ldr	r3, [pc, #232]	; (2b84 <xQueueReceive+0x124>)
    2a9a:	4698      	mov	r8, r3
    2a9c:	e02f      	b.n	2afe <xQueueReceive+0x9e>
    2a9e:	2600      	movs	r6, #0
    2aa0:	e7fa      	b.n	2a98 <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2aa2:	0039      	movs	r1, r7
    2aa4:	0020      	movs	r0, r4
    2aa6:	4b38      	ldr	r3, [pc, #224]	; (2b88 <xQueueReceive+0x128>)
    2aa8:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    2aaa:	3d01      	subs	r5, #1
    2aac:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2aae:	6923      	ldr	r3, [r4, #16]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d007      	beq.n	2ac4 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2ab4:	0020      	movs	r0, r4
    2ab6:	3010      	adds	r0, #16
    2ab8:	4b34      	ldr	r3, [pc, #208]	; (2b8c <xQueueReceive+0x12c>)
    2aba:	4798      	blx	r3
    2abc:	2800      	cmp	r0, #0
    2abe:	d001      	beq.n	2ac4 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    2ac0:	4b33      	ldr	r3, [pc, #204]	; (2b90 <xQueueReceive+0x130>)
    2ac2:	4798      	blx	r3
				taskEXIT_CRITICAL();
    2ac4:	4b33      	ldr	r3, [pc, #204]	; (2b94 <xQueueReceive+0x134>)
    2ac6:	4798      	blx	r3
				return pdPASS;
    2ac8:	2001      	movs	r0, #1
}
    2aca:	b004      	add	sp, #16
    2acc:	bc04      	pop	{r2}
    2ace:	4690      	mov	r8, r2
    2ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    2ad2:	4b30      	ldr	r3, [pc, #192]	; (2b94 <xQueueReceive+0x134>)
    2ad4:	4798      	blx	r3
					return errQUEUE_EMPTY;
    2ad6:	2000      	movs	r0, #0
    2ad8:	e7f7      	b.n	2aca <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    2ada:	a802      	add	r0, sp, #8
    2adc:	4b2e      	ldr	r3, [pc, #184]	; (2b98 <xQueueReceive+0x138>)
    2ade:	4798      	blx	r3
    2ae0:	e016      	b.n	2b10 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    2ae2:	2200      	movs	r2, #0
    2ae4:	2344      	movs	r3, #68	; 0x44
    2ae6:	54e2      	strb	r2, [r4, r3]
    2ae8:	e01d      	b.n	2b26 <xQueueReceive+0xc6>
    2aea:	2200      	movs	r2, #0
    2aec:	2345      	movs	r3, #69	; 0x45
    2aee:	54e2      	strb	r2, [r4, r3]
    2af0:	e01e      	b.n	2b30 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    2af2:	0020      	movs	r0, r4
    2af4:	4b29      	ldr	r3, [pc, #164]	; (2b9c <xQueueReceive+0x13c>)
    2af6:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2af8:	4b29      	ldr	r3, [pc, #164]	; (2ba0 <xQueueReceive+0x140>)
    2afa:	4798      	blx	r3
    2afc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    2afe:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2b00:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    2b02:	2d00      	cmp	r5, #0
    2b04:	d1cd      	bne.n	2aa2 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    2b06:	9b01      	ldr	r3, [sp, #4]
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d0e2      	beq.n	2ad2 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    2b0c:	2e00      	cmp	r6, #0
    2b0e:	d0e4      	beq.n	2ada <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    2b10:	4b20      	ldr	r3, [pc, #128]	; (2b94 <xQueueReceive+0x134>)
    2b12:	4798      	blx	r3
		vTaskSuspendAll();
    2b14:	4b23      	ldr	r3, [pc, #140]	; (2ba4 <xQueueReceive+0x144>)
    2b16:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2b18:	4b1a      	ldr	r3, [pc, #104]	; (2b84 <xQueueReceive+0x124>)
    2b1a:	4798      	blx	r3
    2b1c:	2344      	movs	r3, #68	; 0x44
    2b1e:	5ce3      	ldrb	r3, [r4, r3]
    2b20:	b25b      	sxtb	r3, r3
    2b22:	3301      	adds	r3, #1
    2b24:	d0dd      	beq.n	2ae2 <xQueueReceive+0x82>
    2b26:	2345      	movs	r3, #69	; 0x45
    2b28:	5ce3      	ldrb	r3, [r4, r3]
    2b2a:	b25b      	sxtb	r3, r3
    2b2c:	3301      	adds	r3, #1
    2b2e:	d0dc      	beq.n	2aea <xQueueReceive+0x8a>
    2b30:	4b18      	ldr	r3, [pc, #96]	; (2b94 <xQueueReceive+0x134>)
    2b32:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2b34:	a901      	add	r1, sp, #4
    2b36:	a802      	add	r0, sp, #8
    2b38:	4b1b      	ldr	r3, [pc, #108]	; (2ba8 <xQueueReceive+0x148>)
    2b3a:	4798      	blx	r3
    2b3c:	2800      	cmp	r0, #0
    2b3e:	d113      	bne.n	2b68 <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b40:	0020      	movs	r0, r4
    2b42:	4b1a      	ldr	r3, [pc, #104]	; (2bac <xQueueReceive+0x14c>)
    2b44:	4798      	blx	r3
    2b46:	2800      	cmp	r0, #0
    2b48:	d0d3      	beq.n	2af2 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2b4a:	0020      	movs	r0, r4
    2b4c:	3024      	adds	r0, #36	; 0x24
    2b4e:	9901      	ldr	r1, [sp, #4]
    2b50:	4b17      	ldr	r3, [pc, #92]	; (2bb0 <xQueueReceive+0x150>)
    2b52:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    2b54:	0020      	movs	r0, r4
    2b56:	4b11      	ldr	r3, [pc, #68]	; (2b9c <xQueueReceive+0x13c>)
    2b58:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2b5a:	4b11      	ldr	r3, [pc, #68]	; (2ba0 <xQueueReceive+0x140>)
    2b5c:	4798      	blx	r3
    2b5e:	2800      	cmp	r0, #0
    2b60:	d1cc      	bne.n	2afc <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    2b62:	4b0b      	ldr	r3, [pc, #44]	; (2b90 <xQueueReceive+0x130>)
    2b64:	4798      	blx	r3
    2b66:	e7c9      	b.n	2afc <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    2b68:	0020      	movs	r0, r4
    2b6a:	4b0c      	ldr	r3, [pc, #48]	; (2b9c <xQueueReceive+0x13c>)
    2b6c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2b6e:	4b0c      	ldr	r3, [pc, #48]	; (2ba0 <xQueueReceive+0x140>)
    2b70:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2b72:	0020      	movs	r0, r4
    2b74:	4b0d      	ldr	r3, [pc, #52]	; (2bac <xQueueReceive+0x14c>)
    2b76:	4798      	blx	r3
    2b78:	2800      	cmp	r0, #0
    2b7a:	d0bf      	beq.n	2afc <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    2b7c:	2000      	movs	r0, #0
    2b7e:	e7a4      	b.n	2aca <xQueueReceive+0x6a>
    2b80:	00003501 	.word	0x00003501
    2b84:	000022a1 	.word	0x000022a1
    2b88:	00002645 	.word	0x00002645
    2b8c:	000033e5 	.word	0x000033e5
    2b90:	00002289 	.word	0x00002289
    2b94:	000022b9 	.word	0x000022b9
    2b98:	0000346d 	.word	0x0000346d
    2b9c:	0000266d 	.word	0x0000266d
    2ba0:	00003149 	.word	0x00003149
    2ba4:	00002fe9 	.word	0x00002fe9
    2ba8:	00003485 	.word	0x00003485
    2bac:	00002545 	.word	0x00002545
    2bb0:	00003381 	.word	0x00003381

00002bb4 <vQueueAddToRegistry>:
	{
    2bb4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    2bb6:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <vQueueAddToRegistry+0x2c>)
    2bb8:	681b      	ldr	r3, [r3, #0]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d009      	beq.n	2bd2 <vQueueAddToRegistry+0x1e>
    2bbe:	2301      	movs	r3, #1
    2bc0:	4c07      	ldr	r4, [pc, #28]	; (2be0 <vQueueAddToRegistry+0x2c>)
    2bc2:	00da      	lsls	r2, r3, #3
    2bc4:	58a2      	ldr	r2, [r4, r2]
    2bc6:	2a00      	cmp	r2, #0
    2bc8:	d004      	beq.n	2bd4 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2bca:	3301      	adds	r3, #1
    2bcc:	2b08      	cmp	r3, #8
    2bce:	d1f8      	bne.n	2bc2 <vQueueAddToRegistry+0xe>
	}
    2bd0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    2bd2:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    2bd4:	4a02      	ldr	r2, [pc, #8]	; (2be0 <vQueueAddToRegistry+0x2c>)
    2bd6:	00db      	lsls	r3, r3, #3
    2bd8:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
    2bda:	18d3      	adds	r3, r2, r3
    2bdc:	6058      	str	r0, [r3, #4]
				break;
    2bde:	e7f7      	b.n	2bd0 <vQueueAddToRegistry+0x1c>
    2be0:	20004024 	.word	0x20004024

00002be4 <vQueueWaitForMessageRestricted>:
	{
    2be4:	b570      	push	{r4, r5, r6, lr}
    2be6:	0004      	movs	r4, r0
    2be8:	000d      	movs	r5, r1
    2bea:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    2bec:	4b11      	ldr	r3, [pc, #68]	; (2c34 <vQueueWaitForMessageRestricted+0x50>)
    2bee:	4798      	blx	r3
    2bf0:	2344      	movs	r3, #68	; 0x44
    2bf2:	5ce3      	ldrb	r3, [r4, r3]
    2bf4:	b25b      	sxtb	r3, r3
    2bf6:	3301      	adds	r3, #1
    2bf8:	d00d      	beq.n	2c16 <vQueueWaitForMessageRestricted+0x32>
    2bfa:	2345      	movs	r3, #69	; 0x45
    2bfc:	5ce3      	ldrb	r3, [r4, r3]
    2bfe:	b25b      	sxtb	r3, r3
    2c00:	3301      	adds	r3, #1
    2c02:	d00c      	beq.n	2c1e <vQueueWaitForMessageRestricted+0x3a>
    2c04:	4b0c      	ldr	r3, [pc, #48]	; (2c38 <vQueueWaitForMessageRestricted+0x54>)
    2c06:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2c08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d00b      	beq.n	2c26 <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    2c0e:	0020      	movs	r0, r4
    2c10:	4b0a      	ldr	r3, [pc, #40]	; (2c3c <vQueueWaitForMessageRestricted+0x58>)
    2c12:	4798      	blx	r3
	}
    2c14:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    2c16:	2200      	movs	r2, #0
    2c18:	2344      	movs	r3, #68	; 0x44
    2c1a:	54e2      	strb	r2, [r4, r3]
    2c1c:	e7ed      	b.n	2bfa <vQueueWaitForMessageRestricted+0x16>
    2c1e:	2200      	movs	r2, #0
    2c20:	2345      	movs	r3, #69	; 0x45
    2c22:	54e2      	strb	r2, [r4, r3]
    2c24:	e7ee      	b.n	2c04 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2c26:	0020      	movs	r0, r4
    2c28:	3024      	adds	r0, #36	; 0x24
    2c2a:	0032      	movs	r2, r6
    2c2c:	0029      	movs	r1, r5
    2c2e:	4b04      	ldr	r3, [pc, #16]	; (2c40 <vQueueWaitForMessageRestricted+0x5c>)
    2c30:	4798      	blx	r3
    2c32:	e7ec      	b.n	2c0e <vQueueWaitForMessageRestricted+0x2a>
    2c34:	000022a1 	.word	0x000022a1
    2c38:	000022b9 	.word	0x000022b9
    2c3c:	0000266d 	.word	0x0000266d
    2c40:	000033ad 	.word	0x000033ad

00002c44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2c44:	4b08      	ldr	r3, [pc, #32]	; (2c68 <prvResetNextTaskUnblockTime+0x24>)
    2c46:	681b      	ldr	r3, [r3, #0]
    2c48:	681b      	ldr	r3, [r3, #0]
    2c4a:	2b00      	cmp	r3, #0
    2c4c:	d007      	beq.n	2c5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c4e:	4b06      	ldr	r3, [pc, #24]	; (2c68 <prvResetNextTaskUnblockTime+0x24>)
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2c54:	68db      	ldr	r3, [r3, #12]
    2c56:	685a      	ldr	r2, [r3, #4]
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <prvResetNextTaskUnblockTime+0x28>)
    2c5a:	601a      	str	r2, [r3, #0]
	}
}
    2c5c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2c5e:	2201      	movs	r2, #1
    2c60:	4252      	negs	r2, r2
    2c62:	4b02      	ldr	r3, [pc, #8]	; (2c6c <prvResetNextTaskUnblockTime+0x28>)
    2c64:	601a      	str	r2, [r3, #0]
    2c66:	e7f9      	b.n	2c5c <prvResetNextTaskUnblockTime+0x18>
    2c68:	20003ec0 	.word	0x20003ec0
    2c6c:	20003f74 	.word	0x20003f74

00002c70 <prvIdleTask>:
{
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	46d6      	mov	lr, sl
    2c74:	464f      	mov	r7, r9
    2c76:	4646      	mov	r6, r8
    2c78:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2c7a:	4b14      	ldr	r3, [pc, #80]	; (2ccc <prvIdleTask+0x5c>)
    2c7c:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    2c7e:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <prvIdleTask+0x60>)
    2c80:	4698      	mov	r8, r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c82:	4f14      	ldr	r7, [pc, #80]	; (2cd4 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2c84:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <prvIdleTask+0x68>)
    2c86:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2c88:	464b      	mov	r3, r9
    2c8a:	681b      	ldr	r3, [r3, #0]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d016      	beq.n	2cbe <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    2c90:	47c0      	blx	r8
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c92:	68fb      	ldr	r3, [r7, #12]
    2c94:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2c96:	1d28      	adds	r0, r5, #4
    2c98:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    2c9a:	4a10      	ldr	r2, [pc, #64]	; (2cdc <prvIdleTask+0x6c>)
    2c9c:	6813      	ldr	r3, [r2, #0]
    2c9e:	3b01      	subs	r3, #1
    2ca0:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    2ca2:	4c0a      	ldr	r4, [pc, #40]	; (2ccc <prvIdleTask+0x5c>)
    2ca4:	6823      	ldr	r3, [r4, #0]
    2ca6:	3b01      	subs	r3, #1
    2ca8:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    2caa:	4b0d      	ldr	r3, [pc, #52]	; (2ce0 <prvIdleTask+0x70>)
    2cac:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    2cae:	6b28      	ldr	r0, [r5, #48]	; 0x30
    2cb0:	4e0c      	ldr	r6, [pc, #48]	; (2ce4 <prvIdleTask+0x74>)
    2cb2:	47b0      	blx	r6
			vPortFree( pxTCB );
    2cb4:	0028      	movs	r0, r5
    2cb6:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    2cb8:	6823      	ldr	r3, [r4, #0]
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d1e8      	bne.n	2c90 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    2cbe:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <prvIdleTask+0x78>)
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	2b01      	cmp	r3, #1
    2cc4:	d9e0      	bls.n	2c88 <prvIdleTask+0x18>
				taskYIELD();
    2cc6:	4b09      	ldr	r3, [pc, #36]	; (2cec <prvIdleTask+0x7c>)
    2cc8:	4798      	blx	r3
    2cca:	e7dd      	b.n	2c88 <prvIdleTask+0x18>
    2ccc:	20003f34 	.word	0x20003f34
    2cd0:	000022a1 	.word	0x000022a1
    2cd4:	20003fa8 	.word	0x20003fa8
    2cd8:	00002177 	.word	0x00002177
    2cdc:	20003f30 	.word	0x20003f30
    2ce0:	000022b9 	.word	0x000022b9
    2ce4:	000024e5 	.word	0x000024e5
    2ce8:	20003ec8 	.word	0x20003ec8
    2cec:	00002289 	.word	0x00002289

00002cf0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2cf0:	b570      	push	{r4, r5, r6, lr}
    2cf2:	0004      	movs	r4, r0
    2cf4:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2cf6:	4b17      	ldr	r3, [pc, #92]	; (2d54 <prvAddCurrentTaskToDelayedList+0x64>)
    2cf8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2cfa:	4b17      	ldr	r3, [pc, #92]	; (2d58 <prvAddCurrentTaskToDelayedList+0x68>)
    2cfc:	6818      	ldr	r0, [r3, #0]
    2cfe:	3004      	adds	r0, #4
    2d00:	4b16      	ldr	r3, [pc, #88]	; (2d5c <prvAddCurrentTaskToDelayedList+0x6c>)
    2d02:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2d04:	1c63      	adds	r3, r4, #1
    2d06:	d013      	beq.n	2d30 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    2d08:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2d0a:	4b13      	ldr	r3, [pc, #76]	; (2d58 <prvAddCurrentTaskToDelayedList+0x68>)
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    2d10:	42a6      	cmp	r6, r4
    2d12:	d816      	bhi.n	2d42 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d14:	4b12      	ldr	r3, [pc, #72]	; (2d60 <prvAddCurrentTaskToDelayedList+0x70>)
    2d16:	6818      	ldr	r0, [r3, #0]
    2d18:	4b0f      	ldr	r3, [pc, #60]	; (2d58 <prvAddCurrentTaskToDelayedList+0x68>)
    2d1a:	6819      	ldr	r1, [r3, #0]
    2d1c:	3104      	adds	r1, #4
    2d1e:	4b11      	ldr	r3, [pc, #68]	; (2d64 <prvAddCurrentTaskToDelayedList+0x74>)
    2d20:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    2d22:	4b11      	ldr	r3, [pc, #68]	; (2d68 <prvAddCurrentTaskToDelayedList+0x78>)
    2d24:	681b      	ldr	r3, [r3, #0]
    2d26:	429c      	cmp	r4, r3
    2d28:	d212      	bcs.n	2d50 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    2d2a:	4b0f      	ldr	r3, [pc, #60]	; (2d68 <prvAddCurrentTaskToDelayedList+0x78>)
    2d2c:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2d2e:	e00f      	b.n	2d50 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2d30:	2d00      	cmp	r5, #0
    2d32:	d0e9      	beq.n	2d08 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d34:	4b08      	ldr	r3, [pc, #32]	; (2d58 <prvAddCurrentTaskToDelayedList+0x68>)
    2d36:	6819      	ldr	r1, [r3, #0]
    2d38:	3104      	adds	r1, #4
    2d3a:	480c      	ldr	r0, [pc, #48]	; (2d6c <prvAddCurrentTaskToDelayedList+0x7c>)
    2d3c:	4b0c      	ldr	r3, [pc, #48]	; (2d70 <prvAddCurrentTaskToDelayedList+0x80>)
    2d3e:	4798      	blx	r3
    2d40:	e006      	b.n	2d50 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2d42:	4b0c      	ldr	r3, [pc, #48]	; (2d74 <prvAddCurrentTaskToDelayedList+0x84>)
    2d44:	6818      	ldr	r0, [r3, #0]
    2d46:	4b04      	ldr	r3, [pc, #16]	; (2d58 <prvAddCurrentTaskToDelayedList+0x68>)
    2d48:	6819      	ldr	r1, [r3, #0]
    2d4a:	3104      	adds	r1, #4
    2d4c:	4b05      	ldr	r3, [pc, #20]	; (2d64 <prvAddCurrentTaskToDelayedList+0x74>)
    2d4e:	4798      	blx	r3
}
    2d50:	bd70      	pop	{r4, r5, r6, pc}
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	20003fbc 	.word	0x20003fbc
    2d58:	20003ebc 	.word	0x20003ebc
    2d5c:	00002177 	.word	0x00002177
    2d60:	20003ec0 	.word	0x20003ec0
    2d64:	00002149 	.word	0x00002149
    2d68:	20003f74 	.word	0x20003f74
    2d6c:	20003f94 	.word	0x20003f94
    2d70:	00002131 	.word	0x00002131
    2d74:	20003ec4 	.word	0x20003ec4

00002d78 <xTaskCreate>:
	{
    2d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d7a:	46c6      	mov	lr, r8
    2d7c:	b500      	push	{lr}
    2d7e:	b084      	sub	sp, #16
    2d80:	9001      	str	r0, [sp, #4]
    2d82:	000d      	movs	r5, r1
    2d84:	9302      	str	r3, [sp, #8]
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    2d86:	0097      	lsls	r7, r2, #2
    2d88:	0038      	movs	r0, r7
    2d8a:	4b62      	ldr	r3, [pc, #392]	; (2f14 <xTaskCreate+0x19c>)
    2d8c:	4798      	blx	r3
    2d8e:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    2d90:	d100      	bne.n	2d94 <xTaskCreate+0x1c>
    2d92:	e08c      	b.n	2eae <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    2d94:	2058      	movs	r0, #88	; 0x58
    2d96:	4b5f      	ldr	r3, [pc, #380]	; (2f14 <xTaskCreate+0x19c>)
    2d98:	4798      	blx	r3
    2d9a:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    2d9c:	d100      	bne.n	2da0 <xTaskCreate+0x28>
    2d9e:	e083      	b.n	2ea8 <xTaskCreate+0x130>
					pxNewTCB->pxStack = pxStack;
    2da0:	6306      	str	r6, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    2da2:	003a      	movs	r2, r7
    2da4:	21a5      	movs	r1, #165	; 0xa5
    2da6:	0030      	movs	r0, r6
    2da8:	4b5b      	ldr	r3, [pc, #364]	; (2f18 <xTaskCreate+0x1a0>)
    2daa:	4798      	blx	r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    2dac:	1f3a      	subs	r2, r7, #4
    2dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2db0:	469c      	mov	ip, r3
    2db2:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    2db4:	2307      	movs	r3, #7
    2db6:	439a      	bics	r2, r3
    2db8:	4690      	mov	r8, r2
	if( pcName != NULL )
    2dba:	2d00      	cmp	r5, #0
    2dbc:	d100      	bne.n	2dc0 <xTaskCreate+0x48>
    2dbe:	e079      	b.n	2eb4 <xTaskCreate+0x13c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2dc0:	782a      	ldrb	r2, [r5, #0]
    2dc2:	2334      	movs	r3, #52	; 0x34
    2dc4:	54e2      	strb	r2, [r4, r3]
			if( pcName[ x ] == ( char ) 0x00 )
    2dc6:	782b      	ldrb	r3, [r5, #0]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d00c      	beq.n	2de6 <xTaskCreate+0x6e>
    2dcc:	1c6b      	adds	r3, r5, #1
    2dce:	0022      	movs	r2, r4
    2dd0:	3235      	adds	r2, #53	; 0x35
    2dd2:	3505      	adds	r5, #5
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2dd4:	7819      	ldrb	r1, [r3, #0]
    2dd6:	7011      	strb	r1, [r2, #0]
			if( pcName[ x ] == ( char ) 0x00 )
    2dd8:	7819      	ldrb	r1, [r3, #0]
    2dda:	2900      	cmp	r1, #0
    2ddc:	d003      	beq.n	2de6 <xTaskCreate+0x6e>
    2dde:	3301      	adds	r3, #1
    2de0:	3201      	adds	r2, #1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2de2:	42ab      	cmp	r3, r5
    2de4:	d1f6      	bne.n	2dd4 <xTaskCreate+0x5c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2de6:	2200      	movs	r2, #0
    2de8:	2338      	movs	r3, #56	; 0x38
    2dea:	54e2      	strb	r2, [r4, r3]
    2dec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    2dee:	2f04      	cmp	r7, #4
    2df0:	d900      	bls.n	2df4 <xTaskCreate+0x7c>
    2df2:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    2df4:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    2df6:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
    2df8:	2600      	movs	r6, #0
    2dfa:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2dfc:	1d23      	adds	r3, r4, #4
    2dfe:	9303      	str	r3, [sp, #12]
    2e00:	0018      	movs	r0, r3
    2e02:	4d46      	ldr	r5, [pc, #280]	; (2f1c <xTaskCreate+0x1a4>)
    2e04:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2e06:	0020      	movs	r0, r4
    2e08:	3018      	adds	r0, #24
    2e0a:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2e0c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e0e:	2305      	movs	r3, #5
    2e10:	1bdb      	subs	r3, r3, r7
    2e12:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2e14:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
    2e16:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
    2e18:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2e1a:	2354      	movs	r3, #84	; 0x54
    2e1c:	54e6      	strb	r6, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2e1e:	9a02      	ldr	r2, [sp, #8]
    2e20:	9901      	ldr	r1, [sp, #4]
    2e22:	4640      	mov	r0, r8
    2e24:	4b3e      	ldr	r3, [pc, #248]	; (2f20 <xTaskCreate+0x1a8>)
    2e26:	4798      	blx	r3
    2e28:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
    2e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d000      	beq.n	2e32 <xTaskCreate+0xba>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2e30:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    2e32:	4b3c      	ldr	r3, [pc, #240]	; (2f24 <xTaskCreate+0x1ac>)
    2e34:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    2e36:	4a3c      	ldr	r2, [pc, #240]	; (2f28 <xTaskCreate+0x1b0>)
    2e38:	6813      	ldr	r3, [r2, #0]
    2e3a:	3301      	adds	r3, #1
    2e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    2e3e:	4b3b      	ldr	r3, [pc, #236]	; (2f2c <xTaskCreate+0x1b4>)
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d03a      	beq.n	2ebc <xTaskCreate+0x144>
			if( xSchedulerRunning == pdFALSE )
    2e46:	4b3a      	ldr	r3, [pc, #232]	; (2f30 <xTaskCreate+0x1b8>)
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d107      	bne.n	2e5e <xTaskCreate+0xe6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2e4e:	4b37      	ldr	r3, [pc, #220]	; (2f2c <xTaskCreate+0x1b4>)
    2e50:	681b      	ldr	r3, [r3, #0]
    2e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2e54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2e56:	4293      	cmp	r3, r2
    2e58:	d801      	bhi.n	2e5e <xTaskCreate+0xe6>
					pxCurrentTCB = pxNewTCB;
    2e5a:	4b34      	ldr	r3, [pc, #208]	; (2f2c <xTaskCreate+0x1b4>)
    2e5c:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    2e5e:	4a35      	ldr	r2, [pc, #212]	; (2f34 <xTaskCreate+0x1bc>)
    2e60:	6813      	ldr	r3, [r2, #0]
    2e62:	3301      	adds	r3, #1
    2e64:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    2e66:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList( pxNewTCB );
    2e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e6a:	4a33      	ldr	r2, [pc, #204]	; (2f38 <xTaskCreate+0x1c0>)
    2e6c:	6812      	ldr	r2, [r2, #0]
    2e6e:	4293      	cmp	r3, r2
    2e70:	d901      	bls.n	2e76 <xTaskCreate+0xfe>
    2e72:	4a31      	ldr	r2, [pc, #196]	; (2f38 <xTaskCreate+0x1c0>)
    2e74:	6013      	str	r3, [r2, #0]
    2e76:	0098      	lsls	r0, r3, #2
    2e78:	18c0      	adds	r0, r0, r3
    2e7a:	0080      	lsls	r0, r0, #2
    2e7c:	4b2f      	ldr	r3, [pc, #188]	; (2f3c <xTaskCreate+0x1c4>)
    2e7e:	1818      	adds	r0, r3, r0
    2e80:	9903      	ldr	r1, [sp, #12]
    2e82:	4b2f      	ldr	r3, [pc, #188]	; (2f40 <xTaskCreate+0x1c8>)
    2e84:	4798      	blx	r3
	taskEXIT_CRITICAL();
    2e86:	4b2f      	ldr	r3, [pc, #188]	; (2f44 <xTaskCreate+0x1cc>)
    2e88:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    2e8a:	4b29      	ldr	r3, [pc, #164]	; (2f30 <xTaskCreate+0x1b8>)
    2e8c:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    2e8e:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    2e90:	2b00      	cmp	r3, #0
    2e92:	d005      	beq.n	2ea0 <xTaskCreate+0x128>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2e94:	4b25      	ldr	r3, [pc, #148]	; (2f2c <xTaskCreate+0x1b4>)
    2e96:	681b      	ldr	r3, [r3, #0]
    2e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2e9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e9c:	429a      	cmp	r2, r3
    2e9e:	d335      	bcc.n	2f0c <xTaskCreate+0x194>
	}
    2ea0:	b004      	add	sp, #16
    2ea2:	bc04      	pop	{r2}
    2ea4:	4690      	mov	r8, r2
    2ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    2ea8:	0030      	movs	r0, r6
    2eaa:	4b27      	ldr	r3, [pc, #156]	; (2f48 <xTaskCreate+0x1d0>)
    2eac:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2eae:	2001      	movs	r0, #1
    2eb0:	4240      	negs	r0, r0
    2eb2:	e7f5      	b.n	2ea0 <xTaskCreate+0x128>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    2eb4:	2200      	movs	r2, #0
    2eb6:	2334      	movs	r3, #52	; 0x34
    2eb8:	54e2      	strb	r2, [r4, r3]
    2eba:	e797      	b.n	2dec <xTaskCreate+0x74>
			pxCurrentTCB = pxNewTCB;
    2ebc:	4b1b      	ldr	r3, [pc, #108]	; (2f2c <xTaskCreate+0x1b4>)
    2ebe:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2ec0:	6813      	ldr	r3, [r2, #0]
    2ec2:	2b01      	cmp	r3, #1
    2ec4:	d1cb      	bne.n	2e5e <xTaskCreate+0xe6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2ec6:	4f1d      	ldr	r7, [pc, #116]	; (2f3c <xTaskCreate+0x1c4>)
    2ec8:	0038      	movs	r0, r7
    2eca:	4e20      	ldr	r6, [pc, #128]	; (2f4c <xTaskCreate+0x1d4>)
    2ecc:	47b0      	blx	r6
    2ece:	0038      	movs	r0, r7
    2ed0:	3014      	adds	r0, #20
    2ed2:	47b0      	blx	r6
    2ed4:	0038      	movs	r0, r7
    2ed6:	3028      	adds	r0, #40	; 0x28
    2ed8:	47b0      	blx	r6
    2eda:	0038      	movs	r0, r7
    2edc:	303c      	adds	r0, #60	; 0x3c
    2ede:	47b0      	blx	r6
    2ee0:	0038      	movs	r0, r7
    2ee2:	3050      	adds	r0, #80	; 0x50
    2ee4:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    2ee6:	4b1a      	ldr	r3, [pc, #104]	; (2f50 <xTaskCreate+0x1d8>)
    2ee8:	4698      	mov	r8, r3
    2eea:	0018      	movs	r0, r3
    2eec:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    2eee:	4f19      	ldr	r7, [pc, #100]	; (2f54 <xTaskCreate+0x1dc>)
    2ef0:	0038      	movs	r0, r7
    2ef2:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    2ef4:	4818      	ldr	r0, [pc, #96]	; (2f58 <xTaskCreate+0x1e0>)
    2ef6:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    2ef8:	4818      	ldr	r0, [pc, #96]	; (2f5c <xTaskCreate+0x1e4>)
    2efa:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    2efc:	4818      	ldr	r0, [pc, #96]	; (2f60 <xTaskCreate+0x1e8>)
    2efe:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    2f00:	4b18      	ldr	r3, [pc, #96]	; (2f64 <xTaskCreate+0x1ec>)
    2f02:	4642      	mov	r2, r8
    2f04:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2f06:	4b18      	ldr	r3, [pc, #96]	; (2f68 <xTaskCreate+0x1f0>)
    2f08:	601f      	str	r7, [r3, #0]
    2f0a:	e7a8      	b.n	2e5e <xTaskCreate+0xe6>
			taskYIELD_IF_USING_PREEMPTION();
    2f0c:	4b17      	ldr	r3, [pc, #92]	; (2f6c <xTaskCreate+0x1f4>)
    2f0e:	4798      	blx	r3
			xReturn = pdPASS;
    2f10:	2001      	movs	r0, #1
    2f12:	e7c5      	b.n	2ea0 <xTaskCreate+0x128>
    2f14:	000023b9 	.word	0x000023b9
    2f18:	0000411f 	.word	0x0000411f
    2f1c:	0000212b 	.word	0x0000212b
    2f20:	00002205 	.word	0x00002205
    2f24:	000022a1 	.word	0x000022a1
    2f28:	20003f30 	.word	0x20003f30
    2f2c:	20003ebc 	.word	0x20003ebc
    2f30:	20003f90 	.word	0x20003f90
    2f34:	20003f40 	.word	0x20003f40
    2f38:	20003f44 	.word	0x20003f44
    2f3c:	20003ec8 	.word	0x20003ec8
    2f40:	00002131 	.word	0x00002131
    2f44:	000022b9 	.word	0x000022b9
    2f48:	000024e5 	.word	0x000024e5
    2f4c:	00002115 	.word	0x00002115
    2f50:	20003f48 	.word	0x20003f48
    2f54:	20003f5c 	.word	0x20003f5c
    2f58:	20003f7c 	.word	0x20003f7c
    2f5c:	20003fa8 	.word	0x20003fa8
    2f60:	20003f94 	.word	0x20003f94
    2f64:	20003ec0 	.word	0x20003ec0
    2f68:	20003ec4 	.word	0x20003ec4
    2f6c:	00002289 	.word	0x00002289

00002f70 <vTaskStartScheduler>:
{
    2f70:	b510      	push	{r4, lr}
    2f72:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    2f74:	4b12      	ldr	r3, [pc, #72]	; (2fc0 <vTaskStartScheduler+0x50>)
    2f76:	9301      	str	r3, [sp, #4]
    2f78:	2300      	movs	r3, #0
    2f7a:	9300      	str	r3, [sp, #0]
    2f7c:	2246      	movs	r2, #70	; 0x46
    2f7e:	4911      	ldr	r1, [pc, #68]	; (2fc4 <vTaskStartScheduler+0x54>)
    2f80:	4811      	ldr	r0, [pc, #68]	; (2fc8 <vTaskStartScheduler+0x58>)
    2f82:	4c12      	ldr	r4, [pc, #72]	; (2fcc <vTaskStartScheduler+0x5c>)
    2f84:	47a0      	blx	r4
		if( xReturn == pdPASS )
    2f86:	2801      	cmp	r0, #1
    2f88:	d003      	beq.n	2f92 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2f8a:	1c43      	adds	r3, r0, #1
    2f8c:	d015      	beq.n	2fba <vTaskStartScheduler+0x4a>
}
    2f8e:	b002      	add	sp, #8
    2f90:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    2f92:	4b0f      	ldr	r3, [pc, #60]	; (2fd0 <vTaskStartScheduler+0x60>)
    2f94:	4798      	blx	r3
	if( xReturn == pdPASS )
    2f96:	2801      	cmp	r0, #1
    2f98:	d1f7      	bne.n	2f8a <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    2f9a:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    2f9c:	2201      	movs	r2, #1
    2f9e:	4252      	negs	r2, r2
    2fa0:	4b0c      	ldr	r3, [pc, #48]	; (2fd4 <vTaskStartScheduler+0x64>)
    2fa2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    2fa4:	3202      	adds	r2, #2
    2fa6:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <vTaskStartScheduler+0x68>)
    2fa8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    2faa:	2200      	movs	r2, #0
    2fac:	4b0b      	ldr	r3, [pc, #44]	; (2fdc <vTaskStartScheduler+0x6c>)
    2fae:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
    2fb0:	4b0b      	ldr	r3, [pc, #44]	; (2fe0 <vTaskStartScheduler+0x70>)
    2fb2:	4798      	blx	r3
		if( xPortStartScheduler() != pdFALSE )
    2fb4:	4b0b      	ldr	r3, [pc, #44]	; (2fe4 <vTaskStartScheduler+0x74>)
    2fb6:	4798      	blx	r3
    2fb8:	e7e9      	b.n	2f8e <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    2fba:	b672      	cpsid	i
    2fbc:	e7fe      	b.n	2fbc <vTaskStartScheduler+0x4c>
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	20003f70 	.word	0x20003f70
    2fc4:	00004130 	.word	0x00004130
    2fc8:	00002c71 	.word	0x00002c71
    2fcc:	00002d79 	.word	0x00002d79
    2fd0:	00003655 	.word	0x00003655
    2fd4:	20003f74 	.word	0x20003f74
    2fd8:	20003f90 	.word	0x20003f90
    2fdc:	20003fbc 	.word	0x20003fbc
    2fe0:	00003aa5 	.word	0x00003aa5
    2fe4:	00002225 	.word	0x00002225

00002fe8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    2fe8:	4a02      	ldr	r2, [pc, #8]	; (2ff4 <vTaskSuspendAll+0xc>)
    2fea:	6813      	ldr	r3, [r2, #0]
    2fec:	3301      	adds	r3, #1
    2fee:	6013      	str	r3, [r2, #0]
}
    2ff0:	4770      	bx	lr
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	20003f3c 	.word	0x20003f3c

00002ff8 <xTaskGetTickCount>:
		xTicks = xTickCount;
    2ff8:	4b01      	ldr	r3, [pc, #4]	; (3000 <xTaskGetTickCount+0x8>)
    2ffa:	6818      	ldr	r0, [r3, #0]
}
    2ffc:	4770      	bx	lr
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	20003fbc 	.word	0x20003fbc

00003004 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
    3004:	4b01      	ldr	r3, [pc, #4]	; (300c <xTaskGetTickCountFromISR+0x8>)
    3006:	6818      	ldr	r0, [r3, #0]
}
    3008:	4770      	bx	lr
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	20003fbc 	.word	0x20003fbc

00003010 <xTaskIncrementTick>:
{
    3010:	b5f0      	push	{r4, r5, r6, r7, lr}
    3012:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3014:	4b3d      	ldr	r3, [pc, #244]	; (310c <xTaskIncrementTick+0xfc>)
    3016:	681b      	ldr	r3, [r3, #0]
    3018:	2b00      	cmp	r3, #0
    301a:	d000      	beq.n	301e <xTaskIncrementTick+0xe>
    301c:	e06d      	b.n	30fa <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    301e:	4b3c      	ldr	r3, [pc, #240]	; (3110 <xTaskIncrementTick+0x100>)
    3020:	681d      	ldr	r5, [r3, #0]
    3022:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    3024:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3026:	2d00      	cmp	r5, #0
    3028:	d112      	bne.n	3050 <xTaskIncrementTick+0x40>
			taskSWITCH_DELAYED_LISTS();
    302a:	4b3a      	ldr	r3, [pc, #232]	; (3114 <xTaskIncrementTick+0x104>)
    302c:	681b      	ldr	r3, [r3, #0]
    302e:	681b      	ldr	r3, [r3, #0]
    3030:	2b00      	cmp	r3, #0
    3032:	d001      	beq.n	3038 <xTaskIncrementTick+0x28>
    3034:	b672      	cpsid	i
    3036:	e7fe      	b.n	3036 <xTaskIncrementTick+0x26>
    3038:	4a36      	ldr	r2, [pc, #216]	; (3114 <xTaskIncrementTick+0x104>)
    303a:	6811      	ldr	r1, [r2, #0]
    303c:	4b36      	ldr	r3, [pc, #216]	; (3118 <xTaskIncrementTick+0x108>)
    303e:	6818      	ldr	r0, [r3, #0]
    3040:	6010      	str	r0, [r2, #0]
    3042:	6019      	str	r1, [r3, #0]
    3044:	4a35      	ldr	r2, [pc, #212]	; (311c <xTaskIncrementTick+0x10c>)
    3046:	6813      	ldr	r3, [r2, #0]
    3048:	3301      	adds	r3, #1
    304a:	6013      	str	r3, [r2, #0]
    304c:	4b34      	ldr	r3, [pc, #208]	; (3120 <xTaskIncrementTick+0x110>)
    304e:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    3050:	4b34      	ldr	r3, [pc, #208]	; (3124 <xTaskIncrementTick+0x114>)
    3052:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    3054:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    3056:	429d      	cmp	r5, r3
    3058:	d333      	bcc.n	30c2 <xTaskIncrementTick+0xb2>
    305a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    305c:	4f2d      	ldr	r7, [pc, #180]	; (3114 <xTaskIncrementTick+0x104>)
    305e:	683b      	ldr	r3, [r7, #0]
    3060:	681b      	ldr	r3, [r3, #0]
    3062:	2b00      	cmp	r3, #0
    3064:	d029      	beq.n	30ba <xTaskIncrementTick+0xaa>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3066:	4b2b      	ldr	r3, [pc, #172]	; (3114 <xTaskIncrementTick+0x104>)
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	68db      	ldr	r3, [r3, #12]
    306c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    306e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    3070:	429d      	cmp	r5, r3
    3072:	d33f      	bcc.n	30f4 <xTaskIncrementTick+0xe4>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3074:	1d33      	adds	r3, r6, #4
    3076:	9301      	str	r3, [sp, #4]
    3078:	0018      	movs	r0, r3
    307a:	4b2b      	ldr	r3, [pc, #172]	; (3128 <xTaskIncrementTick+0x118>)
    307c:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    307e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3080:	2b00      	cmp	r3, #0
    3082:	d003      	beq.n	308c <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3084:	0030      	movs	r0, r6
    3086:	3018      	adds	r0, #24
    3088:	4b27      	ldr	r3, [pc, #156]	; (3128 <xTaskIncrementTick+0x118>)
    308a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    308c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    308e:	4a27      	ldr	r2, [pc, #156]	; (312c <xTaskIncrementTick+0x11c>)
    3090:	6812      	ldr	r2, [r2, #0]
    3092:	4293      	cmp	r3, r2
    3094:	d901      	bls.n	309a <xTaskIncrementTick+0x8a>
    3096:	4a25      	ldr	r2, [pc, #148]	; (312c <xTaskIncrementTick+0x11c>)
    3098:	6013      	str	r3, [r2, #0]
    309a:	0098      	lsls	r0, r3, #2
    309c:	18c0      	adds	r0, r0, r3
    309e:	0080      	lsls	r0, r0, #2
    30a0:	4b23      	ldr	r3, [pc, #140]	; (3130 <xTaskIncrementTick+0x120>)
    30a2:	1818      	adds	r0, r3, r0
    30a4:	9901      	ldr	r1, [sp, #4]
    30a6:	4b23      	ldr	r3, [pc, #140]	; (3134 <xTaskIncrementTick+0x124>)
    30a8:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    30aa:	4b23      	ldr	r3, [pc, #140]	; (3138 <xTaskIncrementTick+0x128>)
    30ac:	681b      	ldr	r3, [r3, #0]
    30ae:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    30b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30b2:	429a      	cmp	r2, r3
    30b4:	d3d3      	bcc.n	305e <xTaskIncrementTick+0x4e>
							xSwitchRequired = pdTRUE;
    30b6:	2401      	movs	r4, #1
    30b8:	e7d1      	b.n	305e <xTaskIncrementTick+0x4e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    30ba:	2201      	movs	r2, #1
    30bc:	4252      	negs	r2, r2
    30be:	4b19      	ldr	r3, [pc, #100]	; (3124 <xTaskIncrementTick+0x114>)
    30c0:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    30c2:	4b1d      	ldr	r3, [pc, #116]	; (3138 <xTaskIncrementTick+0x128>)
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    30c8:	0093      	lsls	r3, r2, #2
    30ca:	189b      	adds	r3, r3, r2
    30cc:	009b      	lsls	r3, r3, #2
    30ce:	4a18      	ldr	r2, [pc, #96]	; (3130 <xTaskIncrementTick+0x120>)
    30d0:	589b      	ldr	r3, [r3, r2]
    30d2:	2b01      	cmp	r3, #1
    30d4:	d900      	bls.n	30d8 <xTaskIncrementTick+0xc8>
				xSwitchRequired = pdTRUE;
    30d6:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    30d8:	4b18      	ldr	r3, [pc, #96]	; (313c <xTaskIncrementTick+0x12c>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	2b00      	cmp	r3, #0
    30de:	d101      	bne.n	30e4 <xTaskIncrementTick+0xd4>
				vApplicationTickHook();
    30e0:	4b17      	ldr	r3, [pc, #92]	; (3140 <xTaskIncrementTick+0x130>)
    30e2:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
    30e4:	4b17      	ldr	r3, [pc, #92]	; (3144 <xTaskIncrementTick+0x134>)
    30e6:	681b      	ldr	r3, [r3, #0]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d000      	beq.n	30ee <xTaskIncrementTick+0xde>
			xSwitchRequired = pdTRUE;
    30ec:	2401      	movs	r4, #1
}
    30ee:	0020      	movs	r0, r4
    30f0:	b003      	add	sp, #12
    30f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						xNextTaskUnblockTime = xItemValue;
    30f4:	4a0b      	ldr	r2, [pc, #44]	; (3124 <xTaskIncrementTick+0x114>)
    30f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    30f8:	e7e3      	b.n	30c2 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
    30fa:	4a10      	ldr	r2, [pc, #64]	; (313c <xTaskIncrementTick+0x12c>)
    30fc:	6813      	ldr	r3, [r2, #0]
    30fe:	3301      	adds	r3, #1
    3100:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
    3102:	4b0f      	ldr	r3, [pc, #60]	; (3140 <xTaskIncrementTick+0x130>)
    3104:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
    3106:	2400      	movs	r4, #0
    3108:	e7ec      	b.n	30e4 <xTaskIncrementTick+0xd4>
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	20003f3c 	.word	0x20003f3c
    3110:	20003fbc 	.word	0x20003fbc
    3114:	20003ec0 	.word	0x20003ec0
    3118:	20003ec4 	.word	0x20003ec4
    311c:	20003f78 	.word	0x20003f78
    3120:	00002c45 	.word	0x00002c45
    3124:	20003f74 	.word	0x20003f74
    3128:	00002177 	.word	0x00002177
    312c:	20003f44 	.word	0x20003f44
    3130:	20003ec8 	.word	0x20003ec8
    3134:	00002131 	.word	0x00002131
    3138:	20003ebc 	.word	0x20003ebc
    313c:	20003f38 	.word	0x20003f38
    3140:	00003aa1 	.word	0x00003aa1
    3144:	20003fc0 	.word	0x20003fc0

00003148 <xTaskResumeAll>:
{
    3148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    314a:	4b30      	ldr	r3, [pc, #192]	; (320c <xTaskResumeAll+0xc4>)
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	2b00      	cmp	r3, #0
    3150:	d101      	bne.n	3156 <xTaskResumeAll+0xe>
    3152:	b672      	cpsid	i
    3154:	e7fe      	b.n	3154 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    3156:	4b2e      	ldr	r3, [pc, #184]	; (3210 <xTaskResumeAll+0xc8>)
    3158:	4798      	blx	r3
		--uxSchedulerSuspended;
    315a:	4b2c      	ldr	r3, [pc, #176]	; (320c <xTaskResumeAll+0xc4>)
    315c:	681a      	ldr	r2, [r3, #0]
    315e:	3a01      	subs	r2, #1
    3160:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3162:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    3164:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3166:	2b00      	cmp	r3, #0
    3168:	d103      	bne.n	3172 <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    316a:	4b2a      	ldr	r3, [pc, #168]	; (3214 <xTaskResumeAll+0xcc>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	d103      	bne.n	317a <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    3172:	4b29      	ldr	r3, [pc, #164]	; (3218 <xTaskResumeAll+0xd0>)
    3174:	4798      	blx	r3
}
    3176:	0020      	movs	r0, r4
    3178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    317a:	4d28      	ldr	r5, [pc, #160]	; (321c <xTaskResumeAll+0xd4>)
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    317c:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    317e:	682b      	ldr	r3, [r5, #0]
    3180:	2b00      	cmp	r3, #0
    3182:	d022      	beq.n	31ca <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3184:	68fb      	ldr	r3, [r7, #12]
    3186:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3188:	0020      	movs	r0, r4
    318a:	3018      	adds	r0, #24
    318c:	4b24      	ldr	r3, [pc, #144]	; (3220 <xTaskResumeAll+0xd8>)
    318e:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3190:	1d26      	adds	r6, r4, #4
    3192:	0030      	movs	r0, r6
    3194:	4b22      	ldr	r3, [pc, #136]	; (3220 <xTaskResumeAll+0xd8>)
    3196:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    319a:	4a22      	ldr	r2, [pc, #136]	; (3224 <xTaskResumeAll+0xdc>)
    319c:	6812      	ldr	r2, [r2, #0]
    319e:	4293      	cmp	r3, r2
    31a0:	d901      	bls.n	31a6 <xTaskResumeAll+0x5e>
    31a2:	4a20      	ldr	r2, [pc, #128]	; (3224 <xTaskResumeAll+0xdc>)
    31a4:	6013      	str	r3, [r2, #0]
    31a6:	0098      	lsls	r0, r3, #2
    31a8:	18c0      	adds	r0, r0, r3
    31aa:	0080      	lsls	r0, r0, #2
    31ac:	4b1e      	ldr	r3, [pc, #120]	; (3228 <xTaskResumeAll+0xe0>)
    31ae:	1818      	adds	r0, r3, r0
    31b0:	0031      	movs	r1, r6
    31b2:	4b1e      	ldr	r3, [pc, #120]	; (322c <xTaskResumeAll+0xe4>)
    31b4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    31b6:	4b1e      	ldr	r3, [pc, #120]	; (3230 <xTaskResumeAll+0xe8>)
    31b8:	681b      	ldr	r3, [r3, #0]
    31ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    31bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    31be:	429a      	cmp	r2, r3
    31c0:	d3dd      	bcc.n	317e <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    31c2:	2201      	movs	r2, #1
    31c4:	4b1b      	ldr	r3, [pc, #108]	; (3234 <xTaskResumeAll+0xec>)
    31c6:	601a      	str	r2, [r3, #0]
    31c8:	e7d9      	b.n	317e <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    31ca:	2c00      	cmp	r4, #0
    31cc:	d001      	beq.n	31d2 <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    31ce:	4b1a      	ldr	r3, [pc, #104]	; (3238 <xTaskResumeAll+0xf0>)
    31d0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    31d2:	4b1a      	ldr	r3, [pc, #104]	; (323c <xTaskResumeAll+0xf4>)
    31d4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    31d6:	2c00      	cmp	r4, #0
    31d8:	d00e      	beq.n	31f8 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    31da:	4f19      	ldr	r7, [pc, #100]	; (3240 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    31dc:	4e15      	ldr	r6, [pc, #84]	; (3234 <xTaskResumeAll+0xec>)
    31de:	2501      	movs	r5, #1
    31e0:	e002      	b.n	31e8 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    31e2:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    31e4:	2c00      	cmp	r4, #0
    31e6:	d004      	beq.n	31f2 <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    31e8:	47b8      	blx	r7
    31ea:	2800      	cmp	r0, #0
    31ec:	d0f9      	beq.n	31e2 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    31ee:	6035      	str	r5, [r6, #0]
    31f0:	e7f7      	b.n	31e2 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    31f2:	2200      	movs	r2, #0
    31f4:	4b11      	ldr	r3, [pc, #68]	; (323c <xTaskResumeAll+0xf4>)
    31f6:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    31f8:	4b0e      	ldr	r3, [pc, #56]	; (3234 <xTaskResumeAll+0xec>)
    31fa:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    31fc:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    31fe:	2b00      	cmp	r3, #0
    3200:	d0b7      	beq.n	3172 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    3202:	4b10      	ldr	r3, [pc, #64]	; (3244 <xTaskResumeAll+0xfc>)
    3204:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    3206:	3401      	adds	r4, #1
    3208:	e7b3      	b.n	3172 <xTaskResumeAll+0x2a>
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	20003f3c 	.word	0x20003f3c
    3210:	000022a1 	.word	0x000022a1
    3214:	20003f30 	.word	0x20003f30
    3218:	000022b9 	.word	0x000022b9
    321c:	20003f7c 	.word	0x20003f7c
    3220:	00002177 	.word	0x00002177
    3224:	20003f44 	.word	0x20003f44
    3228:	20003ec8 	.word	0x20003ec8
    322c:	00002131 	.word	0x00002131
    3230:	20003ebc 	.word	0x20003ebc
    3234:	20003fc0 	.word	0x20003fc0
    3238:	00002c45 	.word	0x00002c45
    323c:	20003f38 	.word	0x20003f38
    3240:	00003011 	.word	0x00003011
    3244:	00002289 	.word	0x00002289

00003248 <vTaskDelay>:
	{
    3248:	b510      	push	{r4, lr}
    324a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    324c:	d00f      	beq.n	326e <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    324e:	4b09      	ldr	r3, [pc, #36]	; (3274 <vTaskDelay+0x2c>)
    3250:	681b      	ldr	r3, [r3, #0]
    3252:	2b00      	cmp	r3, #0
    3254:	d001      	beq.n	325a <vTaskDelay+0x12>
    3256:	b672      	cpsid	i
    3258:	e7fe      	b.n	3258 <vTaskDelay+0x10>
			vTaskSuspendAll();
    325a:	4b07      	ldr	r3, [pc, #28]	; (3278 <vTaskDelay+0x30>)
    325c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    325e:	2100      	movs	r1, #0
    3260:	0020      	movs	r0, r4
    3262:	4b06      	ldr	r3, [pc, #24]	; (327c <vTaskDelay+0x34>)
    3264:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    3266:	4b06      	ldr	r3, [pc, #24]	; (3280 <vTaskDelay+0x38>)
    3268:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    326a:	2800      	cmp	r0, #0
    326c:	d101      	bne.n	3272 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    326e:	4b05      	ldr	r3, [pc, #20]	; (3284 <vTaskDelay+0x3c>)
    3270:	4798      	blx	r3
	}
    3272:	bd10      	pop	{r4, pc}
    3274:	20003f3c 	.word	0x20003f3c
    3278:	00002fe9 	.word	0x00002fe9
    327c:	00002cf1 	.word	0x00002cf1
    3280:	00003149 	.word	0x00003149
    3284:	00002289 	.word	0x00002289

00003288 <vTaskSwitchContext>:
{
    3288:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    328a:	4b34      	ldr	r3, [pc, #208]	; (335c <vTaskSwitchContext+0xd4>)
    328c:	681b      	ldr	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d003      	beq.n	329a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    3292:	2201      	movs	r2, #1
    3294:	4b32      	ldr	r3, [pc, #200]	; (3360 <vTaskSwitchContext+0xd8>)
    3296:	601a      	str	r2, [r3, #0]
}
    3298:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
    329a:	2200      	movs	r2, #0
    329c:	4b30      	ldr	r3, [pc, #192]	; (3360 <vTaskSwitchContext+0xd8>)
    329e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    32a0:	4b30      	ldr	r3, [pc, #192]	; (3364 <vTaskSwitchContext+0xdc>)
    32a2:	4798      	blx	r3
			if( ulTotalRunTime > ulTaskSwitchedInTime )
    32a4:	4b30      	ldr	r3, [pc, #192]	; (3368 <vTaskSwitchContext+0xe0>)
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	4298      	cmp	r0, r3
    32aa:	d905      	bls.n	32b8 <vTaskSwitchContext+0x30>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    32ac:	4a2f      	ldr	r2, [pc, #188]	; (336c <vTaskSwitchContext+0xe4>)
    32ae:	6812      	ldr	r2, [r2, #0]
    32b0:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    32b2:	1acb      	subs	r3, r1, r3
    32b4:	181b      	adds	r3, r3, r0
    32b6:	64d3      	str	r3, [r2, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
    32b8:	4b2b      	ldr	r3, [pc, #172]	; (3368 <vTaskSwitchContext+0xe0>)
    32ba:	6018      	str	r0, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    32bc:	4b2b      	ldr	r3, [pc, #172]	; (336c <vTaskSwitchContext+0xe4>)
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32c2:	4a2b      	ldr	r2, [pc, #172]	; (3370 <vTaskSwitchContext+0xe8>)
    32c4:	6819      	ldr	r1, [r3, #0]
    32c6:	4291      	cmp	r1, r2
    32c8:	d102      	bne.n	32d0 <vTaskSwitchContext+0x48>
    32ca:	6859      	ldr	r1, [r3, #4]
    32cc:	4291      	cmp	r1, r2
    32ce:	d01b      	beq.n	3308 <vTaskSwitchContext+0x80>
    32d0:	4b26      	ldr	r3, [pc, #152]	; (336c <vTaskSwitchContext+0xe4>)
    32d2:	6818      	ldr	r0, [r3, #0]
    32d4:	6819      	ldr	r1, [r3, #0]
    32d6:	3134      	adds	r1, #52	; 0x34
    32d8:	4b26      	ldr	r3, [pc, #152]	; (3374 <vTaskSwitchContext+0xec>)
    32da:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    32dc:	4b26      	ldr	r3, [pc, #152]	; (3378 <vTaskSwitchContext+0xf0>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	009a      	lsls	r2, r3, #2
    32e2:	18d2      	adds	r2, r2, r3
    32e4:	0092      	lsls	r2, r2, #2
    32e6:	4925      	ldr	r1, [pc, #148]	; (337c <vTaskSwitchContext+0xf4>)
    32e8:	5852      	ldr	r2, [r2, r1]
    32ea:	2a00      	cmp	r2, #0
    32ec:	d113      	bne.n	3316 <vTaskSwitchContext+0x8e>
    32ee:	2b00      	cmp	r3, #0
    32f0:	d008      	beq.n	3304 <vTaskSwitchContext+0x7c>
    32f2:	3b01      	subs	r3, #1
    32f4:	009a      	lsls	r2, r3, #2
    32f6:	18d2      	adds	r2, r2, r3
    32f8:	0092      	lsls	r2, r2, #2
    32fa:	5852      	ldr	r2, [r2, r1]
    32fc:	2a00      	cmp	r2, #0
    32fe:	d10a      	bne.n	3316 <vTaskSwitchContext+0x8e>
    3300:	2b00      	cmp	r3, #0
    3302:	d1f6      	bne.n	32f2 <vTaskSwitchContext+0x6a>
    3304:	b672      	cpsid	i
    3306:	e7fe      	b.n	3306 <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
    3308:	6899      	ldr	r1, [r3, #8]
    330a:	4291      	cmp	r1, r2
    330c:	d1e0      	bne.n	32d0 <vTaskSwitchContext+0x48>
    330e:	68db      	ldr	r3, [r3, #12]
    3310:	4293      	cmp	r3, r2
    3312:	d1dd      	bne.n	32d0 <vTaskSwitchContext+0x48>
    3314:	e7e2      	b.n	32dc <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3316:	4819      	ldr	r0, [pc, #100]	; (337c <vTaskSwitchContext+0xf4>)
    3318:	009a      	lsls	r2, r3, #2
    331a:	18d1      	adds	r1, r2, r3
    331c:	0089      	lsls	r1, r1, #2
    331e:	1841      	adds	r1, r0, r1
    3320:	684c      	ldr	r4, [r1, #4]
    3322:	6864      	ldr	r4, [r4, #4]
    3324:	604c      	str	r4, [r1, #4]
    3326:	18d2      	adds	r2, r2, r3
    3328:	0092      	lsls	r2, r2, #2
    332a:	3208      	adds	r2, #8
    332c:	1882      	adds	r2, r0, r2
    332e:	4294      	cmp	r4, r2
    3330:	d00b      	beq.n	334a <vTaskSwitchContext+0xc2>
    3332:	009a      	lsls	r2, r3, #2
    3334:	18d2      	adds	r2, r2, r3
    3336:	0092      	lsls	r2, r2, #2
    3338:	4910      	ldr	r1, [pc, #64]	; (337c <vTaskSwitchContext+0xf4>)
    333a:	188a      	adds	r2, r1, r2
    333c:	6852      	ldr	r2, [r2, #4]
    333e:	68d1      	ldr	r1, [r2, #12]
    3340:	4a0a      	ldr	r2, [pc, #40]	; (336c <vTaskSwitchContext+0xe4>)
    3342:	6011      	str	r1, [r2, #0]
    3344:	4a0c      	ldr	r2, [pc, #48]	; (3378 <vTaskSwitchContext+0xf0>)
    3346:	6013      	str	r3, [r2, #0]
}
    3348:	e7a6      	b.n	3298 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    334a:	6860      	ldr	r0, [r4, #4]
    334c:	009a      	lsls	r2, r3, #2
    334e:	18d2      	adds	r2, r2, r3
    3350:	0092      	lsls	r2, r2, #2
    3352:	490a      	ldr	r1, [pc, #40]	; (337c <vTaskSwitchContext+0xf4>)
    3354:	188a      	adds	r2, r1, r2
    3356:	6050      	str	r0, [r2, #4]
    3358:	e7eb      	b.n	3332 <vTaskSwitchContext+0xaa>
    335a:	46c0      	nop			; (mov r8, r8)
    335c:	20003f3c 	.word	0x20003f3c
    3360:	20003fc0 	.word	0x20003fc0
    3364:	00003ab5 	.word	0x00003ab5
    3368:	20003f2c 	.word	0x20003f2c
    336c:	20003ebc 	.word	0x20003ebc
    3370:	a5a5a5a5 	.word	0xa5a5a5a5
    3374:	00003a9d 	.word	0x00003a9d
    3378:	20003f44 	.word	0x20003f44
    337c:	20003ec8 	.word	0x20003ec8

00003380 <vTaskPlaceOnEventList>:
{
    3380:	b510      	push	{r4, lr}
    3382:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    3384:	2800      	cmp	r0, #0
    3386:	d101      	bne.n	338c <vTaskPlaceOnEventList+0xc>
    3388:	b672      	cpsid	i
    338a:	e7fe      	b.n	338a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    338c:	4b04      	ldr	r3, [pc, #16]	; (33a0 <vTaskPlaceOnEventList+0x20>)
    338e:	6819      	ldr	r1, [r3, #0]
    3390:	3118      	adds	r1, #24
    3392:	4b04      	ldr	r3, [pc, #16]	; (33a4 <vTaskPlaceOnEventList+0x24>)
    3394:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3396:	2101      	movs	r1, #1
    3398:	0020      	movs	r0, r4
    339a:	4b03      	ldr	r3, [pc, #12]	; (33a8 <vTaskPlaceOnEventList+0x28>)
    339c:	4798      	blx	r3
}
    339e:	bd10      	pop	{r4, pc}
    33a0:	20003ebc 	.word	0x20003ebc
    33a4:	00002149 	.word	0x00002149
    33a8:	00002cf1 	.word	0x00002cf1

000033ac <vTaskPlaceOnEventListRestricted>:
	{
    33ac:	b570      	push	{r4, r5, r6, lr}
    33ae:	000c      	movs	r4, r1
    33b0:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    33b2:	2800      	cmp	r0, #0
    33b4:	d00d      	beq.n	33d2 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    33b6:	4b08      	ldr	r3, [pc, #32]	; (33d8 <vTaskPlaceOnEventListRestricted+0x2c>)
    33b8:	6819      	ldr	r1, [r3, #0]
    33ba:	3118      	adds	r1, #24
    33bc:	4b07      	ldr	r3, [pc, #28]	; (33dc <vTaskPlaceOnEventListRestricted+0x30>)
    33be:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    33c0:	2d00      	cmp	r5, #0
    33c2:	d001      	beq.n	33c8 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    33c4:	2401      	movs	r4, #1
    33c6:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    33c8:	0029      	movs	r1, r5
    33ca:	0020      	movs	r0, r4
    33cc:	4b04      	ldr	r3, [pc, #16]	; (33e0 <vTaskPlaceOnEventListRestricted+0x34>)
    33ce:	4798      	blx	r3
	}
    33d0:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    33d2:	b672      	cpsid	i
    33d4:	e7fe      	b.n	33d4 <vTaskPlaceOnEventListRestricted+0x28>
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	20003ebc 	.word	0x20003ebc
    33dc:	00002131 	.word	0x00002131
    33e0:	00002cf1 	.word	0x00002cf1

000033e4 <xTaskRemoveFromEventList>:
{
    33e4:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    33e6:	68c3      	ldr	r3, [r0, #12]
    33e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    33ea:	2c00      	cmp	r4, #0
    33ec:	d027      	beq.n	343e <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    33ee:	0025      	movs	r5, r4
    33f0:	3518      	adds	r5, #24
    33f2:	0028      	movs	r0, r5
    33f4:	4b15      	ldr	r3, [pc, #84]	; (344c <xTaskRemoveFromEventList+0x68>)
    33f6:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    33f8:	4b15      	ldr	r3, [pc, #84]	; (3450 <xTaskRemoveFromEventList+0x6c>)
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	2b00      	cmp	r3, #0
    33fe:	d120      	bne.n	3442 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3400:	1d25      	adds	r5, r4, #4
    3402:	0028      	movs	r0, r5
    3404:	4b11      	ldr	r3, [pc, #68]	; (344c <xTaskRemoveFromEventList+0x68>)
    3406:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    3408:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    340a:	4a12      	ldr	r2, [pc, #72]	; (3454 <xTaskRemoveFromEventList+0x70>)
    340c:	6812      	ldr	r2, [r2, #0]
    340e:	4293      	cmp	r3, r2
    3410:	d901      	bls.n	3416 <xTaskRemoveFromEventList+0x32>
    3412:	4a10      	ldr	r2, [pc, #64]	; (3454 <xTaskRemoveFromEventList+0x70>)
    3414:	6013      	str	r3, [r2, #0]
    3416:	0098      	lsls	r0, r3, #2
    3418:	18c0      	adds	r0, r0, r3
    341a:	0080      	lsls	r0, r0, #2
    341c:	4b0e      	ldr	r3, [pc, #56]	; (3458 <xTaskRemoveFromEventList+0x74>)
    341e:	1818      	adds	r0, r3, r0
    3420:	0029      	movs	r1, r5
    3422:	4b0e      	ldr	r3, [pc, #56]	; (345c <xTaskRemoveFromEventList+0x78>)
    3424:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3426:	4b0e      	ldr	r3, [pc, #56]	; (3460 <xTaskRemoveFromEventList+0x7c>)
    3428:	681b      	ldr	r3, [r3, #0]
    342a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    342e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3430:	429a      	cmp	r2, r3
    3432:	d903      	bls.n	343c <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    3434:	2201      	movs	r2, #1
    3436:	4b0b      	ldr	r3, [pc, #44]	; (3464 <xTaskRemoveFromEventList+0x80>)
    3438:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    343a:	3001      	adds	r0, #1
}
    343c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    343e:	b672      	cpsid	i
    3440:	e7fe      	b.n	3440 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3442:	0029      	movs	r1, r5
    3444:	4808      	ldr	r0, [pc, #32]	; (3468 <xTaskRemoveFromEventList+0x84>)
    3446:	4b05      	ldr	r3, [pc, #20]	; (345c <xTaskRemoveFromEventList+0x78>)
    3448:	4798      	blx	r3
    344a:	e7ec      	b.n	3426 <xTaskRemoveFromEventList+0x42>
    344c:	00002177 	.word	0x00002177
    3450:	20003f3c 	.word	0x20003f3c
    3454:	20003f44 	.word	0x20003f44
    3458:	20003ec8 	.word	0x20003ec8
    345c:	00002131 	.word	0x00002131
    3460:	20003ebc 	.word	0x20003ebc
    3464:	20003fc0 	.word	0x20003fc0
    3468:	20003f7c 	.word	0x20003f7c

0000346c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    346c:	4b03      	ldr	r3, [pc, #12]	; (347c <vTaskInternalSetTimeOutState+0x10>)
    346e:	681b      	ldr	r3, [r3, #0]
    3470:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3472:	4b03      	ldr	r3, [pc, #12]	; (3480 <vTaskInternalSetTimeOutState+0x14>)
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	6043      	str	r3, [r0, #4]
}
    3478:	4770      	bx	lr
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	20003f78 	.word	0x20003f78
    3480:	20003fbc 	.word	0x20003fbc

00003484 <xTaskCheckForTimeOut>:
{
    3484:	b570      	push	{r4, r5, r6, lr}
    3486:	0006      	movs	r6, r0
    3488:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    348a:	2800      	cmp	r0, #0
    348c:	d01b      	beq.n	34c6 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    348e:	2900      	cmp	r1, #0
    3490:	d01b      	beq.n	34ca <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    3492:	4b13      	ldr	r3, [pc, #76]	; (34e0 <xTaskCheckForTimeOut+0x5c>)
    3494:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    3496:	4b13      	ldr	r3, [pc, #76]	; (34e4 <xTaskCheckForTimeOut+0x60>)
    3498:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    349a:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    349c:	682b      	ldr	r3, [r5, #0]
    349e:	1c58      	adds	r0, r3, #1
    34a0:	d01c      	beq.n	34dc <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    34a2:	4811      	ldr	r0, [pc, #68]	; (34e8 <xTaskCheckForTimeOut+0x64>)
    34a4:	6800      	ldr	r0, [r0, #0]
    34a6:	6834      	ldr	r4, [r6, #0]
    34a8:	4284      	cmp	r4, r0
    34aa:	d002      	beq.n	34b2 <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    34ac:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    34ae:	428a      	cmp	r2, r1
    34b0:	d205      	bcs.n	34be <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    34b2:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    34b4:	429a      	cmp	r2, r3
    34b6:	d30a      	bcc.n	34ce <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    34b8:	2300      	movs	r3, #0
    34ba:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    34bc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    34be:	4b0b      	ldr	r3, [pc, #44]	; (34ec <xTaskCheckForTimeOut+0x68>)
    34c0:	4798      	blx	r3
}
    34c2:	0020      	movs	r0, r4
    34c4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    34c6:	b672      	cpsid	i
    34c8:	e7fe      	b.n	34c8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    34ca:	b672      	cpsid	i
    34cc:	e7fe      	b.n	34cc <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    34ce:	1a9b      	subs	r3, r3, r2
    34d0:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    34d2:	0030      	movs	r0, r6
    34d4:	4b06      	ldr	r3, [pc, #24]	; (34f0 <xTaskCheckForTimeOut+0x6c>)
    34d6:	4798      	blx	r3
			xReturn = pdFALSE;
    34d8:	2400      	movs	r4, #0
    34da:	e7f0      	b.n	34be <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    34dc:	2400      	movs	r4, #0
    34de:	e7ee      	b.n	34be <xTaskCheckForTimeOut+0x3a>
    34e0:	000022a1 	.word	0x000022a1
    34e4:	20003fbc 	.word	0x20003fbc
    34e8:	20003f78 	.word	0x20003f78
    34ec:	000022b9 	.word	0x000022b9
    34f0:	0000346d 	.word	0x0000346d

000034f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    34f4:	2201      	movs	r2, #1
    34f6:	4b01      	ldr	r3, [pc, #4]	; (34fc <vTaskMissedYield+0x8>)
    34f8:	601a      	str	r2, [r3, #0]
}
    34fa:	4770      	bx	lr
    34fc:	20003fc0 	.word	0x20003fc0

00003500 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    3500:	4b05      	ldr	r3, [pc, #20]	; (3518 <xTaskGetSchedulerState+0x18>)
    3502:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    3504:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    3506:	2b00      	cmp	r3, #0
    3508:	d004      	beq.n	3514 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    350a:	4b04      	ldr	r3, [pc, #16]	; (351c <xTaskGetSchedulerState+0x1c>)
    350c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    350e:	4243      	negs	r3, r0
    3510:	4158      	adcs	r0, r3
    3512:	0040      	lsls	r0, r0, #1
	}
    3514:	4770      	bx	lr
    3516:	46c0      	nop			; (mov r8, r8)
    3518:	20003f90 	.word	0x20003f90
    351c:	20003f3c 	.word	0x20003f3c

00003520 <xTaskPriorityDisinherit>:
	{
    3520:	b570      	push	{r4, r5, r6, lr}
    3522:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    3524:	d02c      	beq.n	3580 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    3526:	4b18      	ldr	r3, [pc, #96]	; (3588 <xTaskPriorityDisinherit+0x68>)
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	4298      	cmp	r0, r3
    352c:	d001      	beq.n	3532 <xTaskPriorityDisinherit+0x12>
    352e:	b672      	cpsid	i
    3530:	e7fe      	b.n	3530 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    3532:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3534:	2b00      	cmp	r3, #0
    3536:	d101      	bne.n	353c <xTaskPriorityDisinherit+0x1c>
    3538:	b672      	cpsid	i
    353a:	e7fe      	b.n	353a <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    353c:	3b01      	subs	r3, #1
    353e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3540:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    3542:	6c41      	ldr	r1, [r0, #68]	; 0x44
    3544:	428a      	cmp	r2, r1
    3546:	d01d      	beq.n	3584 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    3548:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    354a:	2b00      	cmp	r3, #0
    354c:	d117      	bne.n	357e <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    354e:	1d25      	adds	r5, r4, #4
    3550:	0028      	movs	r0, r5
    3552:	4b0e      	ldr	r3, [pc, #56]	; (358c <xTaskPriorityDisinherit+0x6c>)
    3554:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    3556:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3558:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    355a:	2205      	movs	r2, #5
    355c:	1ad2      	subs	r2, r2, r3
    355e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    3560:	4a0b      	ldr	r2, [pc, #44]	; (3590 <xTaskPriorityDisinherit+0x70>)
    3562:	6812      	ldr	r2, [r2, #0]
    3564:	4293      	cmp	r3, r2
    3566:	d901      	bls.n	356c <xTaskPriorityDisinherit+0x4c>
    3568:	4a09      	ldr	r2, [pc, #36]	; (3590 <xTaskPriorityDisinherit+0x70>)
    356a:	6013      	str	r3, [r2, #0]
    356c:	009a      	lsls	r2, r3, #2
    356e:	18d3      	adds	r3, r2, r3
    3570:	009b      	lsls	r3, r3, #2
    3572:	4808      	ldr	r0, [pc, #32]	; (3594 <xTaskPriorityDisinherit+0x74>)
    3574:	18c0      	adds	r0, r0, r3
    3576:	0029      	movs	r1, r5
    3578:	4b07      	ldr	r3, [pc, #28]	; (3598 <xTaskPriorityDisinherit+0x78>)
    357a:	4798      	blx	r3
					xReturn = pdTRUE;
    357c:	2001      	movs	r0, #1
	}
    357e:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    3580:	2000      	movs	r0, #0
    3582:	e7fc      	b.n	357e <xTaskPriorityDisinherit+0x5e>
    3584:	2000      	movs	r0, #0
    3586:	e7fa      	b.n	357e <xTaskPriorityDisinherit+0x5e>
    3588:	20003ebc 	.word	0x20003ebc
    358c:	00002177 	.word	0x00002177
    3590:	20003f44 	.word	0x20003f44
    3594:	20003ec8 	.word	0x20003ec8
    3598:	00002131 	.word	0x00002131

0000359c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    359c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    359e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    35a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    35a2:	4291      	cmp	r1, r2
    35a4:	d80b      	bhi.n	35be <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35a6:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    35a8:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35aa:	6983      	ldr	r3, [r0, #24]
    35ac:	429a      	cmp	r2, r3
    35ae:	d211      	bcs.n	35d4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    35b0:	1d01      	adds	r1, r0, #4
    35b2:	4b09      	ldr	r3, [pc, #36]	; (35d8 <prvInsertTimerInActiveList+0x3c>)
    35b4:	6818      	ldr	r0, [r3, #0]
    35b6:	4b09      	ldr	r3, [pc, #36]	; (35dc <prvInsertTimerInActiveList+0x40>)
    35b8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    35ba:	2400      	movs	r4, #0
    35bc:	e00a      	b.n	35d4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    35be:	429a      	cmp	r2, r3
    35c0:	d202      	bcs.n	35c8 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    35c2:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    35c4:	4299      	cmp	r1, r3
    35c6:	d205      	bcs.n	35d4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    35c8:	1d01      	adds	r1, r0, #4
    35ca:	4b05      	ldr	r3, [pc, #20]	; (35e0 <prvInsertTimerInActiveList+0x44>)
    35cc:	6818      	ldr	r0, [r3, #0]
    35ce:	4b03      	ldr	r3, [pc, #12]	; (35dc <prvInsertTimerInActiveList+0x40>)
    35d0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    35d2:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    35d4:	0020      	movs	r0, r4
    35d6:	bd10      	pop	{r4, pc}
    35d8:	20003fc8 	.word	0x20003fc8
    35dc:	00002149 	.word	0x00002149
    35e0:	20003fc4 	.word	0x20003fc4

000035e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    35e4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    35e6:	4b10      	ldr	r3, [pc, #64]	; (3628 <prvCheckForValidListAndQueue+0x44>)
    35e8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    35ea:	4b10      	ldr	r3, [pc, #64]	; (362c <prvCheckForValidListAndQueue+0x48>)
    35ec:	681b      	ldr	r3, [r3, #0]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d002      	beq.n	35f8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    35f2:	4b0f      	ldr	r3, [pc, #60]	; (3630 <prvCheckForValidListAndQueue+0x4c>)
    35f4:	4798      	blx	r3
}
    35f6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    35f8:	4d0e      	ldr	r5, [pc, #56]	; (3634 <prvCheckForValidListAndQueue+0x50>)
    35fa:	0028      	movs	r0, r5
    35fc:	4e0e      	ldr	r6, [pc, #56]	; (3638 <prvCheckForValidListAndQueue+0x54>)
    35fe:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    3600:	4c0e      	ldr	r4, [pc, #56]	; (363c <prvCheckForValidListAndQueue+0x58>)
    3602:	0020      	movs	r0, r4
    3604:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    3606:	4b0e      	ldr	r3, [pc, #56]	; (3640 <prvCheckForValidListAndQueue+0x5c>)
    3608:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    360a:	4b0e      	ldr	r3, [pc, #56]	; (3644 <prvCheckForValidListAndQueue+0x60>)
    360c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    360e:	2200      	movs	r2, #0
    3610:	210c      	movs	r1, #12
    3612:	2005      	movs	r0, #5
    3614:	4b0c      	ldr	r3, [pc, #48]	; (3648 <prvCheckForValidListAndQueue+0x64>)
    3616:	4798      	blx	r3
    3618:	4b04      	ldr	r3, [pc, #16]	; (362c <prvCheckForValidListAndQueue+0x48>)
    361a:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
    361c:	2800      	cmp	r0, #0
    361e:	d0e8      	beq.n	35f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    3620:	490a      	ldr	r1, [pc, #40]	; (364c <prvCheckForValidListAndQueue+0x68>)
    3622:	4b0b      	ldr	r3, [pc, #44]	; (3650 <prvCheckForValidListAndQueue+0x6c>)
    3624:	4798      	blx	r3
    3626:	e7e4      	b.n	35f2 <prvCheckForValidListAndQueue+0xe>
    3628:	000022a1 	.word	0x000022a1
    362c:	20003ff8 	.word	0x20003ff8
    3630:	000022b9 	.word	0x000022b9
    3634:	20003fcc 	.word	0x20003fcc
    3638:	00002115 	.word	0x00002115
    363c:	20003fe0 	.word	0x20003fe0
    3640:	20003fc4 	.word	0x20003fc4
    3644:	20003fc8 	.word	0x20003fc8
    3648:	00002799 	.word	0x00002799
    364c:	00004160 	.word	0x00004160
    3650:	00002bb5 	.word	0x00002bb5

00003654 <xTimerCreateTimerTask>:
{
    3654:	b510      	push	{r4, lr}
    3656:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    3658:	4b0a      	ldr	r3, [pc, #40]	; (3684 <xTimerCreateTimerTask+0x30>)
    365a:	4798      	blx	r3
	if( xTimerQueue != NULL )
    365c:	4b0a      	ldr	r3, [pc, #40]	; (3688 <xTimerCreateTimerTask+0x34>)
    365e:	681b      	ldr	r3, [r3, #0]
    3660:	2b00      	cmp	r3, #0
    3662:	d00d      	beq.n	3680 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    3664:	4b09      	ldr	r3, [pc, #36]	; (368c <xTimerCreateTimerTask+0x38>)
    3666:	9301      	str	r3, [sp, #4]
    3668:	2302      	movs	r3, #2
    366a:	9300      	str	r3, [sp, #0]
    366c:	2300      	movs	r3, #0
    366e:	2250      	movs	r2, #80	; 0x50
    3670:	4907      	ldr	r1, [pc, #28]	; (3690 <xTimerCreateTimerTask+0x3c>)
    3672:	4808      	ldr	r0, [pc, #32]	; (3694 <xTimerCreateTimerTask+0x40>)
    3674:	4c08      	ldr	r4, [pc, #32]	; (3698 <xTimerCreateTimerTask+0x44>)
    3676:	47a0      	blx	r4
	configASSERT( xReturn );
    3678:	2800      	cmp	r0, #0
    367a:	d001      	beq.n	3680 <xTimerCreateTimerTask+0x2c>
}
    367c:	b002      	add	sp, #8
    367e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    3680:	b672      	cpsid	i
    3682:	e7fe      	b.n	3682 <xTimerCreateTimerTask+0x2e>
    3684:	000035e5 	.word	0x000035e5
    3688:	20003ff8 	.word	0x20003ff8
    368c:	20003ffc 	.word	0x20003ffc
    3690:	00004168 	.word	0x00004168
    3694:	000037c9 	.word	0x000037c9
    3698:	00002d79 	.word	0x00002d79

0000369c <xTimerGenericCommand>:
{
    369c:	b530      	push	{r4, r5, lr}
    369e:	b085      	sub	sp, #20
    36a0:	0004      	movs	r4, r0
    36a2:	001d      	movs	r5, r3
	configASSERT( xTimer );
    36a4:	2800      	cmp	r0, #0
    36a6:	d014      	beq.n	36d2 <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    36a8:	4b13      	ldr	r3, [pc, #76]	; (36f8 <xTimerGenericCommand+0x5c>)
    36aa:	6818      	ldr	r0, [r3, #0]
    36ac:	2800      	cmp	r0, #0
    36ae:	d021      	beq.n	36f4 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    36b0:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    36b2:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    36b4:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    36b6:	2905      	cmp	r1, #5
    36b8:	dc15      	bgt.n	36e6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    36ba:	4b10      	ldr	r3, [pc, #64]	; (36fc <xTimerGenericCommand+0x60>)
    36bc:	4798      	blx	r3
    36be:	2802      	cmp	r0, #2
    36c0:	d009      	beq.n	36d6 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    36c2:	4b0d      	ldr	r3, [pc, #52]	; (36f8 <xTimerGenericCommand+0x5c>)
    36c4:	6818      	ldr	r0, [r3, #0]
    36c6:	2300      	movs	r3, #0
    36c8:	2200      	movs	r2, #0
    36ca:	a901      	add	r1, sp, #4
    36cc:	4c0c      	ldr	r4, [pc, #48]	; (3700 <xTimerGenericCommand+0x64>)
    36ce:	47a0      	blx	r4
    36d0:	e00e      	b.n	36f0 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    36d2:	b672      	cpsid	i
    36d4:	e7fe      	b.n	36d4 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    36d6:	4b08      	ldr	r3, [pc, #32]	; (36f8 <xTimerGenericCommand+0x5c>)
    36d8:	6818      	ldr	r0, [r3, #0]
    36da:	2300      	movs	r3, #0
    36dc:	9a08      	ldr	r2, [sp, #32]
    36de:	a901      	add	r1, sp, #4
    36e0:	4c07      	ldr	r4, [pc, #28]	; (3700 <xTimerGenericCommand+0x64>)
    36e2:	47a0      	blx	r4
    36e4:	e004      	b.n	36f0 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    36e6:	2300      	movs	r3, #0
    36e8:	002a      	movs	r2, r5
    36ea:	a901      	add	r1, sp, #4
    36ec:	4c05      	ldr	r4, [pc, #20]	; (3704 <xTimerGenericCommand+0x68>)
    36ee:	47a0      	blx	r4
}
    36f0:	b005      	add	sp, #20
    36f2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    36f4:	2000      	movs	r0, #0
	return xReturn;
    36f6:	e7fb      	b.n	36f0 <xTimerGenericCommand+0x54>
    36f8:	20003ff8 	.word	0x20003ff8
    36fc:	00003501 	.word	0x00003501
    3700:	000027e5 	.word	0x000027e5
    3704:	00002991 	.word	0x00002991

00003708 <prvSampleTimeNow>:
{
    3708:	b5f0      	push	{r4, r5, r6, r7, lr}
    370a:	46de      	mov	lr, fp
    370c:	4657      	mov	r7, sl
    370e:	464e      	mov	r6, r9
    3710:	4645      	mov	r5, r8
    3712:	b5e0      	push	{r5, r6, r7, lr}
    3714:	b083      	sub	sp, #12
    3716:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
    3718:	4b24      	ldr	r3, [pc, #144]	; (37ac <prvSampleTimeNow+0xa4>)
    371a:	4798      	blx	r3
    371c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
    371e:	4b24      	ldr	r3, [pc, #144]	; (37b0 <prvSampleTimeNow+0xa8>)
    3720:	681b      	ldr	r3, [r3, #0]
    3722:	4298      	cmp	r0, r3
    3724:	d318      	bcc.n	3758 <prvSampleTimeNow+0x50>
		*pxTimerListsWereSwitched = pdFALSE;
    3726:	2300      	movs	r3, #0
    3728:	464a      	mov	r2, r9
    372a:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    372c:	4b20      	ldr	r3, [pc, #128]	; (37b0 <prvSampleTimeNow+0xa8>)
    372e:	4642      	mov	r2, r8
    3730:	601a      	str	r2, [r3, #0]
}
    3732:	4640      	mov	r0, r8
    3734:	b003      	add	sp, #12
    3736:	bc3c      	pop	{r2, r3, r4, r5}
    3738:	4690      	mov	r8, r2
    373a:	4699      	mov	r9, r3
    373c:	46a2      	mov	sl, r4
    373e:	46ab      	mov	fp, r5
    3740:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3742:	2300      	movs	r3, #0
    3744:	9300      	str	r3, [sp, #0]
    3746:	4652      	mov	r2, sl
    3748:	2100      	movs	r1, #0
    374a:	0020      	movs	r0, r4
    374c:	4c19      	ldr	r4, [pc, #100]	; (37b4 <prvSampleTimeNow+0xac>)
    374e:	47a0      	blx	r4
				configASSERT( xResult );
    3750:	2800      	cmp	r0, #0
    3752:	d104      	bne.n	375e <prvSampleTimeNow+0x56>
    3754:	b672      	cpsid	i
    3756:	e7fe      	b.n	3756 <prvSampleTimeNow+0x4e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3758:	4d17      	ldr	r5, [pc, #92]	; (37b8 <prvSampleTimeNow+0xb0>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    375a:	4b18      	ldr	r3, [pc, #96]	; (37bc <prvSampleTimeNow+0xb4>)
    375c:	469b      	mov	fp, r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    375e:	2628      	movs	r6, #40	; 0x28
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3760:	682b      	ldr	r3, [r5, #0]
    3762:	681a      	ldr	r2, [r3, #0]
    3764:	2a00      	cmp	r2, #0
    3766:	d018      	beq.n	379a <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3768:	68db      	ldr	r3, [r3, #12]
    376a:	681a      	ldr	r2, [r3, #0]
    376c:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    376e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3770:	1d27      	adds	r7, r4, #4
    3772:	0038      	movs	r0, r7
    3774:	47d8      	blx	fp
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3776:	0020      	movs	r0, r4
    3778:	6a23      	ldr	r3, [r4, #32]
    377a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    377c:	5da3      	ldrb	r3, [r4, r6]
    377e:	075b      	lsls	r3, r3, #29
    3780:	d5ee      	bpl.n	3760 <prvSampleTimeNow+0x58>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3782:	69a3      	ldr	r3, [r4, #24]
    3784:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
    3786:	459a      	cmp	sl, r3
    3788:	d2db      	bcs.n	3742 <prvSampleTimeNow+0x3a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    378a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    378c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    378e:	4b0a      	ldr	r3, [pc, #40]	; (37b8 <prvSampleTimeNow+0xb0>)
    3790:	6818      	ldr	r0, [r3, #0]
    3792:	0039      	movs	r1, r7
    3794:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <prvSampleTimeNow+0xb8>)
    3796:	4798      	blx	r3
    3798:	e7e1      	b.n	375e <prvSampleTimeNow+0x56>
	pxCurrentTimerList = pxOverflowTimerList;
    379a:	4a0a      	ldr	r2, [pc, #40]	; (37c4 <prvSampleTimeNow+0xbc>)
    379c:	4906      	ldr	r1, [pc, #24]	; (37b8 <prvSampleTimeNow+0xb0>)
    379e:	6810      	ldr	r0, [r2, #0]
    37a0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    37a2:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    37a4:	2301      	movs	r3, #1
    37a6:	464a      	mov	r2, r9
    37a8:	6013      	str	r3, [r2, #0]
    37aa:	e7bf      	b.n	372c <prvSampleTimeNow+0x24>
    37ac:	00002ff9 	.word	0x00002ff9
    37b0:	20003ff4 	.word	0x20003ff4
    37b4:	0000369d 	.word	0x0000369d
    37b8:	20003fc4 	.word	0x20003fc4
    37bc:	00002177 	.word	0x00002177
    37c0:	00002149 	.word	0x00002149
    37c4:	20003fc8 	.word	0x20003fc8

000037c8 <prvTimerTask>:
{
    37c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ca:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37cc:	4f61      	ldr	r7, [pc, #388]	; (3954 <prvTimerTask+0x18c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    37ce:	4b62      	ldr	r3, [pc, #392]	; (3958 <prvTimerTask+0x190>)
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    37d4:	2a00      	cmp	r2, #0
    37d6:	d021      	beq.n	381c <prvTimerTask+0x54>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    37d8:	68db      	ldr	r3, [r3, #12]
    37da:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    37dc:	4b5f      	ldr	r3, [pc, #380]	; (395c <prvTimerTask+0x194>)
    37de:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    37e0:	a805      	add	r0, sp, #20
    37e2:	4b5f      	ldr	r3, [pc, #380]	; (3960 <prvTimerTask+0x198>)
    37e4:	4798      	blx	r3
    37e6:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    37e8:	9e05      	ldr	r6, [sp, #20]
    37ea:	2e00      	cmp	r6, #0
    37ec:	d162      	bne.n	38b4 <prvTimerTask+0xec>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    37ee:	42a0      	cmp	r0, r4
    37f0:	d323      	bcc.n	383a <prvTimerTask+0x72>
				( void ) xTaskResumeAll();
    37f2:	4b5c      	ldr	r3, [pc, #368]	; (3964 <prvTimerTask+0x19c>)
    37f4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37f6:	4b58      	ldr	r3, [pc, #352]	; (3958 <prvTimerTask+0x190>)
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	68db      	ldr	r3, [r3, #12]
    37fc:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37fe:	1d30      	adds	r0, r6, #4
    3800:	4b54      	ldr	r3, [pc, #336]	; (3954 <prvTimerTask+0x18c>)
    3802:	4798      	blx	r3
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3804:	2328      	movs	r3, #40	; 0x28
    3806:	5cf3      	ldrb	r3, [r6, r3]
    3808:	075a      	lsls	r2, r3, #29
    380a:	d43c      	bmi.n	3886 <prvTimerTask+0xbe>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    380c:	2201      	movs	r2, #1
    380e:	4393      	bics	r3, r2
    3810:	3227      	adds	r2, #39	; 0x27
    3812:	54b3      	strb	r3, [r6, r2]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3814:	6a33      	ldr	r3, [r6, #32]
    3816:	0030      	movs	r0, r6
    3818:	4798      	blx	r3
    381a:	e018      	b.n	384e <prvTimerTask+0x86>
	vTaskSuspendAll();
    381c:	4b4f      	ldr	r3, [pc, #316]	; (395c <prvTimerTask+0x194>)
    381e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3820:	a805      	add	r0, sp, #20
    3822:	4b4f      	ldr	r3, [pc, #316]	; (3960 <prvTimerTask+0x198>)
    3824:	4798      	blx	r3
    3826:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    3828:	9b05      	ldr	r3, [sp, #20]
    382a:	2b00      	cmp	r3, #0
    382c:	d142      	bne.n	38b4 <prvTimerTask+0xec>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    382e:	4b4e      	ldr	r3, [pc, #312]	; (3968 <prvTimerTask+0x1a0>)
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	681a      	ldr	r2, [r3, #0]
    3834:	4256      	negs	r6, r2
    3836:	4156      	adcs	r6, r2
		xNextExpireTime = ( TickType_t ) 0U;
    3838:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    383a:	1b61      	subs	r1, r4, r5
    383c:	4b4b      	ldr	r3, [pc, #300]	; (396c <prvTimerTask+0x1a4>)
    383e:	6818      	ldr	r0, [r3, #0]
    3840:	0032      	movs	r2, r6
    3842:	4b4b      	ldr	r3, [pc, #300]	; (3970 <prvTimerTask+0x1a8>)
    3844:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    3846:	4b47      	ldr	r3, [pc, #284]	; (3964 <prvTimerTask+0x19c>)
    3848:	4798      	blx	r3
    384a:	2800      	cmp	r0, #0
    384c:	d02f      	beq.n	38ae <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    384e:	4d47      	ldr	r5, [pc, #284]	; (396c <prvTimerTask+0x1a4>)
    3850:	4c48      	ldr	r4, [pc, #288]	; (3974 <prvTimerTask+0x1ac>)
    3852:	2200      	movs	r2, #0
    3854:	a905      	add	r1, sp, #20
    3856:	6828      	ldr	r0, [r5, #0]
    3858:	47a0      	blx	r4
    385a:	2800      	cmp	r0, #0
    385c:	d0b7      	beq.n	37ce <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    385e:	9b05      	ldr	r3, [sp, #20]
    3860:	9303      	str	r3, [sp, #12]
    3862:	2b00      	cmp	r3, #0
    3864:	dbf5      	blt.n	3852 <prvTimerTask+0x8a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3866:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3868:	6973      	ldr	r3, [r6, #20]
    386a:	2b00      	cmp	r3, #0
    386c:	d001      	beq.n	3872 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    386e:	1d30      	adds	r0, r6, #4
    3870:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3872:	a804      	add	r0, sp, #16
    3874:	4b3a      	ldr	r3, [pc, #232]	; (3960 <prvTimerTask+0x198>)
    3876:	4798      	blx	r3
			switch( xMessage.xMessageID )
    3878:	9b05      	ldr	r3, [sp, #20]
    387a:	2b09      	cmp	r3, #9
    387c:	d8e9      	bhi.n	3852 <prvTimerTask+0x8a>
    387e:	009b      	lsls	r3, r3, #2
    3880:	4a3d      	ldr	r2, [pc, #244]	; (3978 <prvTimerTask+0x1b0>)
    3882:	58d3      	ldr	r3, [r2, r3]
    3884:	469f      	mov	pc, r3
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3886:	69b3      	ldr	r3, [r6, #24]
    3888:	18e1      	adds	r1, r4, r3
    388a:	0023      	movs	r3, r4
    388c:	002a      	movs	r2, r5
    388e:	0030      	movs	r0, r6
    3890:	4d3a      	ldr	r5, [pc, #232]	; (397c <prvTimerTask+0x1b4>)
    3892:	47a8      	blx	r5
    3894:	2800      	cmp	r0, #0
    3896:	d0bd      	beq.n	3814 <prvTimerTask+0x4c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3898:	2300      	movs	r3, #0
    389a:	9300      	str	r3, [sp, #0]
    389c:	0022      	movs	r2, r4
    389e:	2100      	movs	r1, #0
    38a0:	0030      	movs	r0, r6
    38a2:	4c37      	ldr	r4, [pc, #220]	; (3980 <prvTimerTask+0x1b8>)
    38a4:	47a0      	blx	r4
			configASSERT( xResult );
    38a6:	2800      	cmp	r0, #0
    38a8:	d1b4      	bne.n	3814 <prvTimerTask+0x4c>
    38aa:	b672      	cpsid	i
    38ac:	e7fe      	b.n	38ac <prvTimerTask+0xe4>
					portYIELD_WITHIN_API();
    38ae:	4b35      	ldr	r3, [pc, #212]	; (3984 <prvTimerTask+0x1bc>)
    38b0:	4798      	blx	r3
    38b2:	e7cc      	b.n	384e <prvTimerTask+0x86>
			( void ) xTaskResumeAll();
    38b4:	4b2b      	ldr	r3, [pc, #172]	; (3964 <prvTimerTask+0x19c>)
    38b6:	4798      	blx	r3
    38b8:	e7c9      	b.n	384e <prvTimerTask+0x86>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    38ba:	2228      	movs	r2, #40	; 0x28
    38bc:	5cb3      	ldrb	r3, [r6, r2]
    38be:	2101      	movs	r1, #1
    38c0:	430b      	orrs	r3, r1
    38c2:	54b3      	strb	r3, [r6, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    38c4:	9b06      	ldr	r3, [sp, #24]
    38c6:	69b2      	ldr	r2, [r6, #24]
    38c8:	4694      	mov	ip, r2
    38ca:	4463      	add	r3, ip
    38cc:	0019      	movs	r1, r3
    38ce:	9b06      	ldr	r3, [sp, #24]
    38d0:	0002      	movs	r2, r0
    38d2:	0030      	movs	r0, r6
    38d4:	4c29      	ldr	r4, [pc, #164]	; (397c <prvTimerTask+0x1b4>)
    38d6:	47a0      	blx	r4
    38d8:	2800      	cmp	r0, #0
    38da:	d0b9      	beq.n	3850 <prvTimerTask+0x88>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    38dc:	0030      	movs	r0, r6
    38de:	6a33      	ldr	r3, [r6, #32]
    38e0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    38e2:	2328      	movs	r3, #40	; 0x28
    38e4:	5cf3      	ldrb	r3, [r6, r3]
    38e6:	075b      	lsls	r3, r3, #29
    38e8:	d5b2      	bpl.n	3850 <prvTimerTask+0x88>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    38ea:	9b06      	ldr	r3, [sp, #24]
    38ec:	69b1      	ldr	r1, [r6, #24]
    38ee:	468c      	mov	ip, r1
    38f0:	4463      	add	r3, ip
    38f2:	001a      	movs	r2, r3
    38f4:	2300      	movs	r3, #0
    38f6:	9300      	str	r3, [sp, #0]
    38f8:	2100      	movs	r1, #0
    38fa:	0030      	movs	r0, r6
    38fc:	4c20      	ldr	r4, [pc, #128]	; (3980 <prvTimerTask+0x1b8>)
    38fe:	47a0      	blx	r4
							configASSERT( xResult );
    3900:	2800      	cmp	r0, #0
    3902:	d1a5      	bne.n	3850 <prvTimerTask+0x88>
    3904:	b672      	cpsid	i
    3906:	e7fe      	b.n	3906 <prvTimerTask+0x13e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3908:	2228      	movs	r2, #40	; 0x28
    390a:	5cb3      	ldrb	r3, [r6, r2]
    390c:	2101      	movs	r1, #1
    390e:	438b      	bics	r3, r1
    3910:	54b3      	strb	r3, [r6, r2]
    3912:	e79d      	b.n	3850 <prvTimerTask+0x88>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3914:	2228      	movs	r2, #40	; 0x28
    3916:	5cb3      	ldrb	r3, [r6, r2]
    3918:	2101      	movs	r1, #1
    391a:	430b      	orrs	r3, r1
    391c:	54b3      	strb	r3, [r6, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    391e:	9906      	ldr	r1, [sp, #24]
    3920:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3922:	2900      	cmp	r1, #0
    3924:	d006      	beq.n	3934 <prvTimerTask+0x16c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3926:	1841      	adds	r1, r0, r1
    3928:	0003      	movs	r3, r0
    392a:	0002      	movs	r2, r0
    392c:	0030      	movs	r0, r6
    392e:	4c13      	ldr	r4, [pc, #76]	; (397c <prvTimerTask+0x1b4>)
    3930:	47a0      	blx	r4
    3932:	e78d      	b.n	3850 <prvTimerTask+0x88>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    3934:	b672      	cpsid	i
    3936:	e7fe      	b.n	3936 <prvTimerTask+0x16e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3938:	2328      	movs	r3, #40	; 0x28
    393a:	5cf3      	ldrb	r3, [r6, r3]
    393c:	079a      	lsls	r2, r3, #30
    393e:	d504      	bpl.n	394a <prvTimerTask+0x182>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3940:	2201      	movs	r2, #1
    3942:	4393      	bics	r3, r2
    3944:	3227      	adds	r2, #39	; 0x27
    3946:	54b3      	strb	r3, [r6, r2]
    3948:	e782      	b.n	3850 <prvTimerTask+0x88>
							vPortFree( pxTimer );
    394a:	0030      	movs	r0, r6
    394c:	4b0e      	ldr	r3, [pc, #56]	; (3988 <prvTimerTask+0x1c0>)
    394e:	4798      	blx	r3
    3950:	e77e      	b.n	3850 <prvTimerTask+0x88>
    3952:	46c0      	nop			; (mov r8, r8)
    3954:	00002177 	.word	0x00002177
    3958:	20003fc4 	.word	0x20003fc4
    395c:	00002fe9 	.word	0x00002fe9
    3960:	00003709 	.word	0x00003709
    3964:	00003149 	.word	0x00003149
    3968:	20003fc8 	.word	0x20003fc8
    396c:	20003ff8 	.word	0x20003ff8
    3970:	00002be5 	.word	0x00002be5
    3974:	00002a61 	.word	0x00002a61
    3978:	00004138 	.word	0x00004138
    397c:	0000359d 	.word	0x0000359d
    3980:	0000369d 	.word	0x0000369d
    3984:	00002289 	.word	0x00002289
    3988:	000024e5 	.word	0x000024e5

0000398c <task_blink_led>:
	
	while(true);
}

void task_blink_led(void *param)
{
    398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(true)
	{
		vTaskDelay(1000);
    398e:	27fa      	movs	r7, #250	; 0xfa
    3990:	00bf      	lsls	r7, r7, #2
    3992:	4e05      	ldr	r6, [pc, #20]	; (39a8 <task_blink_led+0x1c>)

inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    3994:	4d05      	ldr	r5, [pc, #20]	; (39ac <task_blink_led+0x20>)
    3996:	0038      	movs	r0, r7
    3998:	47b0      	blx	r6
    399a:	2480      	movs	r4, #128	; 0x80
    399c:	02a4      	lsls	r4, r4, #10
    399e:	61ac      	str	r4, [r5, #24]
		ioport_set_pin_level(PIN_LED, true);
		vTaskDelay(1000);
    39a0:	0038      	movs	r0, r7
    39a2:	47b0      	blx	r6
	} else {
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    39a4:	616c      	str	r4, [r5, #20]
    39a6:	e7f6      	b.n	3996 <task_blink_led+0xa>
    39a8:	00003249 	.word	0x00003249
    39ac:	41004400 	.word	0x41004400

000039b0 <task_blink_rx>:
		ioport_set_pin_level(PIN_LED, false);
	}
}

void task_blink_rx(void *param)
{
    39b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(true)
	{
		vTaskDelay(2000);
    39b2:	27fa      	movs	r7, #250	; 0xfa
    39b4:	00ff      	lsls	r7, r7, #3
    39b6:	4e05      	ldr	r6, [pc, #20]	; (39cc <task_blink_rx+0x1c>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    39b8:	4d05      	ldr	r5, [pc, #20]	; (39d0 <task_blink_rx+0x20>)
    39ba:	0038      	movs	r0, r7
    39bc:	47b0      	blx	r6
    39be:	2480      	movs	r4, #128	; 0x80
    39c0:	0624      	lsls	r4, r4, #24
    39c2:	61ac      	str	r4, [r5, #24]
		ioport_set_pin_level(PIN_RX, true);
		vTaskDelay(2000);
    39c4:	0038      	movs	r0, r7
    39c6:	47b0      	blx	r6
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    39c8:	616c      	str	r4, [r5, #20]
    39ca:	e7f6      	b.n	39ba <task_blink_rx+0xa>
    39cc:	00003249 	.word	0x00003249
    39d0:	41004400 	.word	0x41004400

000039d4 <task_blink_tx>:
		ioport_set_pin_level(PIN_RX, false);
	}
}

void task_blink_tx(void *param)
{
    39d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while(true)
	{
		vTaskDelay(3000);
    39d6:	4f06      	ldr	r7, [pc, #24]	; (39f0 <task_blink_tx+0x1c>)
    39d8:	4e06      	ldr	r6, [pc, #24]	; (39f4 <task_blink_tx+0x20>)
		arch_ioport_pin_to_base(pin)->OUTSET.reg = arch_ioport_pin_to_mask(pin);
    39da:	4d07      	ldr	r5, [pc, #28]	; (39f8 <task_blink_tx+0x24>)
    39dc:	0038      	movs	r0, r7
    39de:	47b0      	blx	r6
    39e0:	2480      	movs	r4, #128	; 0x80
    39e2:	0524      	lsls	r4, r4, #20
    39e4:	61ac      	str	r4, [r5, #24]
		ioport_set_pin_level(PIN_TX, true);
		vTaskDelay(3000);
    39e6:	0038      	movs	r0, r7
    39e8:	47b0      	blx	r6
		arch_ioport_pin_to_base(pin)->OUTCLR.reg = arch_ioport_pin_to_mask(pin);
    39ea:	616c      	str	r4, [r5, #20]
    39ec:	e7f6      	b.n	39dc <task_blink_tx+0x8>
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	00000bb8 	.word	0x00000bb8
    39f4:	00003249 	.word	0x00003249
    39f8:	41004400 	.word	0x41004400

000039fc <main>:
{
    39fc:	b570      	push	{r4, r5, r6, lr}
    39fe:	b082      	sub	sp, #8
	system_init();	//initializes processor/board components
    3a00:	4b1b      	ldr	r3, [pc, #108]	; (3a70 <main+0x74>)
    3a02:	4798      	blx	r3
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3a04:	4b1b      	ldr	r3, [pc, #108]	; (3a74 <main+0x78>)
    3a06:	2280      	movs	r2, #128	; 0x80
    3a08:	0292      	lsls	r2, r2, #10
    3a0a:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    3a0c:	2251      	movs	r2, #81	; 0x51
    3a0e:	5c99      	ldrb	r1, [r3, r2]
    3a10:	2002      	movs	r0, #2
    3a12:	4301      	orrs	r1, r0
    3a14:	b2c9      	uxtb	r1, r1
    3a16:	5499      	strb	r1, [r3, r2]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3a18:	2280      	movs	r2, #128	; 0x80
    3a1a:	0612      	lsls	r2, r2, #24
    3a1c:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    3a1e:	225f      	movs	r2, #95	; 0x5f
    3a20:	5c99      	ldrb	r1, [r3, r2]
    3a22:	4301      	orrs	r1, r0
    3a24:	b2c9      	uxtb	r1, r1
    3a26:	5499      	strb	r1, [r3, r2]
		base->DIRSET.reg = arch_ioport_pin_to_mask(pin);
    3a28:	2280      	movs	r2, #128	; 0x80
    3a2a:	0512      	lsls	r2, r2, #20
    3a2c:	609a      	str	r2, [r3, #8]
	base->PINCFG[pin & 0x1F].reg |= PORT_PINCFG_INEN;
    3a2e:	215b      	movs	r1, #91	; 0x5b
    3a30:	5c5a      	ldrb	r2, [r3, r1]
    3a32:	4302      	orrs	r2, r0
    3a34:	b2d2      	uxtb	r2, r2
    3a36:	545a      	strb	r2, [r3, r1]
	xTaskCreate(	task_blink_led, "task_blink_led", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    3a38:	2600      	movs	r6, #0
    3a3a:	9601      	str	r6, [sp, #4]
    3a3c:	2501      	movs	r5, #1
    3a3e:	9500      	str	r5, [sp, #0]
    3a40:	2300      	movs	r3, #0
    3a42:	2246      	movs	r2, #70	; 0x46
    3a44:	490c      	ldr	r1, [pc, #48]	; (3a78 <main+0x7c>)
    3a46:	480d      	ldr	r0, [pc, #52]	; (3a7c <main+0x80>)
    3a48:	4c0d      	ldr	r4, [pc, #52]	; (3a80 <main+0x84>)
    3a4a:	47a0      	blx	r4
	xTaskCreate(	task_blink_rx, "task_blink_rx", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    3a4c:	9601      	str	r6, [sp, #4]
    3a4e:	9500      	str	r5, [sp, #0]
    3a50:	2300      	movs	r3, #0
    3a52:	2246      	movs	r2, #70	; 0x46
    3a54:	490b      	ldr	r1, [pc, #44]	; (3a84 <main+0x88>)
    3a56:	480c      	ldr	r0, [pc, #48]	; (3a88 <main+0x8c>)
    3a58:	47a0      	blx	r4
	xTaskCreate(	task_blink_tx, "task_blink_tx", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    3a5a:	9601      	str	r6, [sp, #4]
    3a5c:	9500      	str	r5, [sp, #0]
    3a5e:	2300      	movs	r3, #0
    3a60:	2246      	movs	r2, #70	; 0x46
    3a62:	490a      	ldr	r1, [pc, #40]	; (3a8c <main+0x90>)
    3a64:	480a      	ldr	r0, [pc, #40]	; (3a90 <main+0x94>)
    3a66:	47a0      	blx	r4
	vTaskStartScheduler(); //start the task and run them
    3a68:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <main+0x98>)
    3a6a:	4798      	blx	r3
    3a6c:	e7fe      	b.n	3a6c <main+0x70>
    3a6e:	46c0      	nop			; (mov r8, r8)
    3a70:	00003e99 	.word	0x00003e99
    3a74:	41004400 	.word	0x41004400
    3a78:	00004170 	.word	0x00004170
    3a7c:	0000398d 	.word	0x0000398d
    3a80:	00002d79 	.word	0x00002d79
    3a84:	00004180 	.word	0x00004180
    3a88:	000039b1 	.word	0x000039b1
    3a8c:	00004190 	.word	0x00004190
    3a90:	000039d5 	.word	0x000039d5
    3a94:	00002f71 	.word	0x00002f71

00003a98 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
    3a98:	b672      	cpsid	i
    3a9a:	e7fe      	b.n	3a9a <vApplicationMallocFailedHook+0x2>

00003a9c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
    3a9c:	b672      	cpsid	i
    3a9e:	e7fe      	b.n	3a9e <vApplicationStackOverflowHook+0x2>

00003aa0 <vApplicationTickHook>:
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h.  User code can be
	added here, but the tick hook is called from an interrupt context, so
	code must not attempt to block, and only the interrupt safe FreeRTOS API
	functions can be used (those that end in FromISR()). */
}
    3aa0:	4770      	bx	lr
	...

00003aa4 <vMainConfigureTimerForRunTimeStats>:
void vMainConfigureTimerForRunTimeStats( void )
{
	/* Used by the optional run-time stats gathering functionality. */
	
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
    3aa4:	22c8      	movs	r2, #200	; 0xc8
    3aa6:	0092      	lsls	r2, r2, #2
    3aa8:	4b01      	ldr	r3, [pc, #4]	; (3ab0 <vMainConfigureTimerForRunTimeStats+0xc>)
    3aaa:	601a      	str	r2, [r3, #0]
}
    3aac:	4770      	bx	lr
    3aae:	46c0      	nop			; (mov r8, r8)
    3ab0:	20004000 	.word	0x20004000

00003ab4 <ulMainGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

unsigned long ulMainGetRunTimeCounterValue( void )
{
    3ab4:	b570      	push	{r4, r5, r6, lr}
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
    3ab6:	4b0e      	ldr	r3, [pc, #56]	; (3af0 <ulMainGetRunTimeCounterValue+0x3c>)
    3ab8:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
    3aba:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <ulMainGetRunTimeCounterValue+0x40>)
    3abc:	4798      	blx	r3
    3abe:	0005      	movs	r5, r0

	/* This is called from the context switch, so will be called from a
	critical section.  xTaskGetTickCountFromISR() contains its own critical
	section, and the ISR safe critical sections are not designed to nest,
	so reset the critical section. */
	portSET_INTERRUPT_MASK_FROM_ISR();
    3ac0:	4b0d      	ldr	r3, [pc, #52]	; (3af8 <ulMainGetRunTimeCounterValue+0x44>)
    3ac2:	4798      	blx	r3
	
	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
    3ac4:	4b0d      	ldr	r3, [pc, #52]	; (3afc <ulMainGetRunTimeCounterValue+0x48>)
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	015b      	lsls	r3, r3, #5
    3aca:	d50d      	bpl.n	3ae8 <ulMainGetRunTimeCounterValue+0x34>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
    3acc:	3501      	adds	r5, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
    3ace:	4b08      	ldr	r3, [pc, #32]	; (3af0 <ulMainGetRunTimeCounterValue+0x3c>)
    3ad0:	681b      	ldr	r3, [r3, #0]
    3ad2:	480b      	ldr	r0, [pc, #44]	; (3b00 <ulMainGetRunTimeCounterValue+0x4c>)
    3ad4:	1ac0      	subs	r0, r0, r3
	}	
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
    3ad6:	00ac      	lsls	r4, r5, #2
    3ad8:	1964      	adds	r4, r4, r5
    3ada:	0064      	lsls	r4, r4, #1
		
	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
    3adc:	4b09      	ldr	r3, [pc, #36]	; (3b04 <ulMainGetRunTimeCounterValue+0x50>)
    3ade:	6819      	ldr	r1, [r3, #0]
    3ae0:	4b09      	ldr	r3, [pc, #36]	; (3b08 <ulMainGetRunTimeCounterValue+0x54>)
    3ae2:	4798      	blx	r3
    3ae4:	1900      	adds	r0, r0, r4
	
	return ulReturn;	
}
    3ae6:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
    3ae8:	4805      	ldr	r0, [pc, #20]	; (3b00 <ulMainGetRunTimeCounterValue+0x4c>)
    3aea:	1b00      	subs	r0, r0, r4
    3aec:	e7f3      	b.n	3ad6 <ulMainGetRunTimeCounterValue+0x22>
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	e000e018 	.word	0xe000e018
    3af4:	00003005 	.word	0x00003005
    3af8:	000022d9 	.word	0x000022d9
    3afc:	e000ed04 	.word	0xe000ed04
    3b00:	00001f3f 	.word	0x00001f3f
    3b04:	20004000 	.word	0x20004000
    3b08:	00003fad 	.word	0x00003fad

00003b0c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3b0c:	4770      	bx	lr
	...

00003b10 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3b10:	4b0c      	ldr	r3, [pc, #48]	; (3b44 <cpu_irq_enter_critical+0x34>)
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	2b00      	cmp	r3, #0
    3b16:	d106      	bne.n	3b26 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b18:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d007      	beq.n	3b30 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3b20:	2200      	movs	r2, #0
    3b22:	4b09      	ldr	r3, [pc, #36]	; (3b48 <cpu_irq_enter_critical+0x38>)
    3b24:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3b26:	4a07      	ldr	r2, [pc, #28]	; (3b44 <cpu_irq_enter_critical+0x34>)
    3b28:	6813      	ldr	r3, [r2, #0]
    3b2a:	3301      	adds	r3, #1
    3b2c:	6013      	str	r3, [r2, #0]
}
    3b2e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3b30:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3b32:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3b36:	2200      	movs	r2, #0
    3b38:	4b04      	ldr	r3, [pc, #16]	; (3b4c <cpu_irq_enter_critical+0x3c>)
    3b3a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3b3c:	3201      	adds	r2, #1
    3b3e:	4b02      	ldr	r3, [pc, #8]	; (3b48 <cpu_irq_enter_critical+0x38>)
    3b40:	701a      	strb	r2, [r3, #0]
    3b42:	e7f0      	b.n	3b26 <cpu_irq_enter_critical+0x16>
    3b44:	20004004 	.word	0x20004004
    3b48:	20004008 	.word	0x20004008
    3b4c:	20000004 	.word	0x20000004

00003b50 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3b50:	4b08      	ldr	r3, [pc, #32]	; (3b74 <cpu_irq_leave_critical+0x24>)
    3b52:	681a      	ldr	r2, [r3, #0]
    3b54:	3a01      	subs	r2, #1
    3b56:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	2b00      	cmp	r3, #0
    3b5c:	d109      	bne.n	3b72 <cpu_irq_leave_critical+0x22>
    3b5e:	4b06      	ldr	r3, [pc, #24]	; (3b78 <cpu_irq_leave_critical+0x28>)
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d005      	beq.n	3b72 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3b66:	2201      	movs	r2, #1
    3b68:	4b04      	ldr	r3, [pc, #16]	; (3b7c <cpu_irq_leave_critical+0x2c>)
    3b6a:	701a      	strb	r2, [r3, #0]
    3b6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b70:	b662      	cpsie	i
	}
}
    3b72:	4770      	bx	lr
    3b74:	20004004 	.word	0x20004004
    3b78:	20004008 	.word	0x20004008
    3b7c:	20000004 	.word	0x20000004

00003b80 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3b80:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3b82:	490c      	ldr	r1, [pc, #48]	; (3bb4 <system_clock_source_osc8m_set_config+0x34>)
    3b84:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3b86:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3b88:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    3b8a:	7840      	ldrb	r0, [r0, #1]
    3b8c:	2201      	movs	r2, #1
    3b8e:	4010      	ands	r0, r2
    3b90:	0180      	lsls	r0, r0, #6
    3b92:	2640      	movs	r6, #64	; 0x40
    3b94:	43b3      	bics	r3, r6
    3b96:	4303      	orrs	r3, r0
    3b98:	402a      	ands	r2, r5
    3b9a:	01d2      	lsls	r2, r2, #7
    3b9c:	2080      	movs	r0, #128	; 0x80
    3b9e:	4383      	bics	r3, r0
    3ba0:	4313      	orrs	r3, r2
    3ba2:	2203      	movs	r2, #3
    3ba4:	4022      	ands	r2, r4
    3ba6:	0212      	lsls	r2, r2, #8
    3ba8:	4803      	ldr	r0, [pc, #12]	; (3bb8 <system_clock_source_osc8m_set_config+0x38>)
    3baa:	4003      	ands	r3, r0
    3bac:	4313      	orrs	r3, r2
    3bae:	620b      	str	r3, [r1, #32]
}
    3bb0:	bd70      	pop	{r4, r5, r6, pc}
    3bb2:	46c0      	nop			; (mov r8, r8)
    3bb4:	40000800 	.word	0x40000800
    3bb8:	fffffcff 	.word	0xfffffcff

00003bbc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3bbc:	2808      	cmp	r0, #8
    3bbe:	d803      	bhi.n	3bc8 <system_clock_source_enable+0xc>
    3bc0:	0080      	lsls	r0, r0, #2
    3bc2:	4b25      	ldr	r3, [pc, #148]	; (3c58 <system_clock_source_enable+0x9c>)
    3bc4:	581b      	ldr	r3, [r3, r0]
    3bc6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3bc8:	2017      	movs	r0, #23
    3bca:	e044      	b.n	3c56 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3bcc:	4a23      	ldr	r2, [pc, #140]	; (3c5c <system_clock_source_enable+0xa0>)
    3bce:	6a13      	ldr	r3, [r2, #32]
    3bd0:	2102      	movs	r1, #2
    3bd2:	430b      	orrs	r3, r1
    3bd4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    3bd6:	2000      	movs	r0, #0
    3bd8:	e03d      	b.n	3c56 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3bda:	4a20      	ldr	r2, [pc, #128]	; (3c5c <system_clock_source_enable+0xa0>)
    3bdc:	6993      	ldr	r3, [r2, #24]
    3bde:	2102      	movs	r1, #2
    3be0:	430b      	orrs	r3, r1
    3be2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3be4:	2000      	movs	r0, #0
		break;
    3be6:	e036      	b.n	3c56 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3be8:	4a1c      	ldr	r2, [pc, #112]	; (3c5c <system_clock_source_enable+0xa0>)
    3bea:	8a13      	ldrh	r3, [r2, #16]
    3bec:	2102      	movs	r1, #2
    3bee:	430b      	orrs	r3, r1
    3bf0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    3bf2:	2000      	movs	r0, #0
		break;
    3bf4:	e02f      	b.n	3c56 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3bf6:	4a19      	ldr	r2, [pc, #100]	; (3c5c <system_clock_source_enable+0xa0>)
    3bf8:	8a93      	ldrh	r3, [r2, #20]
    3bfa:	2102      	movs	r1, #2
    3bfc:	430b      	orrs	r3, r1
    3bfe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    3c00:	2000      	movs	r0, #0
		break;
    3c02:	e028      	b.n	3c56 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3c04:	4916      	ldr	r1, [pc, #88]	; (3c60 <system_clock_source_enable+0xa4>)
    3c06:	680b      	ldr	r3, [r1, #0]
    3c08:	2202      	movs	r2, #2
    3c0a:	4313      	orrs	r3, r2
    3c0c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3c0e:	4b13      	ldr	r3, [pc, #76]	; (3c5c <system_clock_source_enable+0xa0>)
    3c10:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3c12:	0019      	movs	r1, r3
    3c14:	320e      	adds	r2, #14
    3c16:	68cb      	ldr	r3, [r1, #12]
    3c18:	421a      	tst	r2, r3
    3c1a:	d0fc      	beq.n	3c16 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3c1c:	4a10      	ldr	r2, [pc, #64]	; (3c60 <system_clock_source_enable+0xa4>)
    3c1e:	6891      	ldr	r1, [r2, #8]
    3c20:	4b0e      	ldr	r3, [pc, #56]	; (3c5c <system_clock_source_enable+0xa0>)
    3c22:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3c24:	6852      	ldr	r2, [r2, #4]
    3c26:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3c28:	2200      	movs	r2, #0
    3c2a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3c2c:	0019      	movs	r1, r3
    3c2e:	3210      	adds	r2, #16
    3c30:	68cb      	ldr	r3, [r1, #12]
    3c32:	421a      	tst	r2, r3
    3c34:	d0fc      	beq.n	3c30 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3c36:	4b0a      	ldr	r3, [pc, #40]	; (3c60 <system_clock_source_enable+0xa4>)
    3c38:	681b      	ldr	r3, [r3, #0]
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	4a07      	ldr	r2, [pc, #28]	; (3c5c <system_clock_source_enable+0xa0>)
    3c3e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3c40:	2000      	movs	r0, #0
    3c42:	e008      	b.n	3c56 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3c44:	4905      	ldr	r1, [pc, #20]	; (3c5c <system_clock_source_enable+0xa0>)
    3c46:	2244      	movs	r2, #68	; 0x44
    3c48:	5c8b      	ldrb	r3, [r1, r2]
    3c4a:	2002      	movs	r0, #2
    3c4c:	4303      	orrs	r3, r0
    3c4e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3c50:	2000      	movs	r0, #0
		break;
    3c52:	e000      	b.n	3c56 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3c54:	2000      	movs	r0, #0
}
    3c56:	4770      	bx	lr
    3c58:	000041a0 	.word	0x000041a0
    3c5c:	40000800 	.word	0x40000800
    3c60:	2000400c 	.word	0x2000400c

00003c64 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3c64:	b530      	push	{r4, r5, lr}
    3c66:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3c68:	22c2      	movs	r2, #194	; 0xc2
    3c6a:	00d2      	lsls	r2, r2, #3
    3c6c:	4b1a      	ldr	r3, [pc, #104]	; (3cd8 <system_clock_init+0x74>)
    3c6e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3c70:	4a1a      	ldr	r2, [pc, #104]	; (3cdc <system_clock_init+0x78>)
    3c72:	6853      	ldr	r3, [r2, #4]
    3c74:	211e      	movs	r1, #30
    3c76:	438b      	bics	r3, r1
    3c78:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3c7a:	2301      	movs	r3, #1
    3c7c:	466a      	mov	r2, sp
    3c7e:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c80:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3c82:	4d17      	ldr	r5, [pc, #92]	; (3ce0 <system_clock_init+0x7c>)
    3c84:	b2e0      	uxtb	r0, r4
    3c86:	4669      	mov	r1, sp
    3c88:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3c8a:	3401      	adds	r4, #1
    3c8c:	2c25      	cmp	r4, #37	; 0x25
    3c8e:	d1f9      	bne.n	3c84 <system_clock_init+0x20>
	config->run_in_standby  = false;
    3c90:	a803      	add	r0, sp, #12
    3c92:	2400      	movs	r4, #0
    3c94:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    3c96:	2501      	movs	r5, #1
    3c98:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3c9a:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3c9c:	4b11      	ldr	r3, [pc, #68]	; (3ce4 <system_clock_init+0x80>)
    3c9e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3ca0:	2006      	movs	r0, #6
    3ca2:	4b11      	ldr	r3, [pc, #68]	; (3ce8 <system_clock_init+0x84>)
    3ca4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3ca6:	4b11      	ldr	r3, [pc, #68]	; (3cec <system_clock_init+0x88>)
    3ca8:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    3caa:	4b11      	ldr	r3, [pc, #68]	; (3cf0 <system_clock_init+0x8c>)
    3cac:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    3cae:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3cb0:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3cb2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3cb4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    3cb6:	466b      	mov	r3, sp
    3cb8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3cba:	2306      	movs	r3, #6
    3cbc:	466a      	mov	r2, sp
    3cbe:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    3cc0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    3cc2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3cc4:	4669      	mov	r1, sp
    3cc6:	2000      	movs	r0, #0
    3cc8:	4b0a      	ldr	r3, [pc, #40]	; (3cf4 <system_clock_init+0x90>)
    3cca:	4798      	blx	r3
    3ccc:	2000      	movs	r0, #0
    3cce:	4b0a      	ldr	r3, [pc, #40]	; (3cf8 <system_clock_init+0x94>)
    3cd0:	4798      	blx	r3
#endif
}
    3cd2:	b005      	add	sp, #20
    3cd4:	bd30      	pop	{r4, r5, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	40000800 	.word	0x40000800
    3cdc:	41004000 	.word	0x41004000
    3ce0:	00003e79 	.word	0x00003e79
    3ce4:	00003b81 	.word	0x00003b81
    3ce8:	00003bbd 	.word	0x00003bbd
    3cec:	00003cfd 	.word	0x00003cfd
    3cf0:	40000400 	.word	0x40000400
    3cf4:	00003d21 	.word	0x00003d21
    3cf8:	00003dd9 	.word	0x00003dd9

00003cfc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3cfc:	4a06      	ldr	r2, [pc, #24]	; (3d18 <system_gclk_init+0x1c>)
    3cfe:	6993      	ldr	r3, [r2, #24]
    3d00:	2108      	movs	r1, #8
    3d02:	430b      	orrs	r3, r1
    3d04:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3d06:	2201      	movs	r2, #1
    3d08:	4b04      	ldr	r3, [pc, #16]	; (3d1c <system_gclk_init+0x20>)
    3d0a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3d0c:	0019      	movs	r1, r3
    3d0e:	780b      	ldrb	r3, [r1, #0]
    3d10:	4213      	tst	r3, r2
    3d12:	d1fc      	bne.n	3d0e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3d14:	4770      	bx	lr
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	40000400 	.word	0x40000400
    3d1c:	40000c00 	.word	0x40000c00

00003d20 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3d20:	b570      	push	{r4, r5, r6, lr}
    3d22:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3d24:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3d26:	780d      	ldrb	r5, [r1, #0]
    3d28:	022d      	lsls	r5, r5, #8
    3d2a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3d2c:	784b      	ldrb	r3, [r1, #1]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d002      	beq.n	3d38 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3d32:	2380      	movs	r3, #128	; 0x80
    3d34:	02db      	lsls	r3, r3, #11
    3d36:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3d38:	7a4b      	ldrb	r3, [r1, #9]
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d002      	beq.n	3d44 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3d3e:	2380      	movs	r3, #128	; 0x80
    3d40:	031b      	lsls	r3, r3, #12
    3d42:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3d44:	6848      	ldr	r0, [r1, #4]
    3d46:	2801      	cmp	r0, #1
    3d48:	d910      	bls.n	3d6c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3d4a:	1e43      	subs	r3, r0, #1
    3d4c:	4218      	tst	r0, r3
    3d4e:	d134      	bne.n	3dba <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3d50:	2802      	cmp	r0, #2
    3d52:	d930      	bls.n	3db6 <system_gclk_gen_set_config+0x96>
    3d54:	2302      	movs	r3, #2
    3d56:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3d58:	3201      	adds	r2, #1
						mask <<= 1) {
    3d5a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    3d5c:	4298      	cmp	r0, r3
    3d5e:	d8fb      	bhi.n	3d58 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3d60:	0212      	lsls	r2, r2, #8
    3d62:	4332      	orrs	r2, r6
    3d64:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3d66:	2380      	movs	r3, #128	; 0x80
    3d68:	035b      	lsls	r3, r3, #13
    3d6a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3d6c:	7a0b      	ldrb	r3, [r1, #8]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d002      	beq.n	3d78 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3d72:	2380      	movs	r3, #128	; 0x80
    3d74:	039b      	lsls	r3, r3, #14
    3d76:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3d78:	4a13      	ldr	r2, [pc, #76]	; (3dc8 <system_gclk_gen_set_config+0xa8>)
    3d7a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3d7c:	b25b      	sxtb	r3, r3
    3d7e:	2b00      	cmp	r3, #0
    3d80:	dbfb      	blt.n	3d7a <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3d82:	4b12      	ldr	r3, [pc, #72]	; (3dcc <system_gclk_gen_set_config+0xac>)
    3d84:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3d86:	4b12      	ldr	r3, [pc, #72]	; (3dd0 <system_gclk_gen_set_config+0xb0>)
    3d88:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3d8a:	4a0f      	ldr	r2, [pc, #60]	; (3dc8 <system_gclk_gen_set_config+0xa8>)
    3d8c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3d8e:	b25b      	sxtb	r3, r3
    3d90:	2b00      	cmp	r3, #0
    3d92:	dbfb      	blt.n	3d8c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3d94:	4b0c      	ldr	r3, [pc, #48]	; (3dc8 <system_gclk_gen_set_config+0xa8>)
    3d96:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3d98:	001a      	movs	r2, r3
    3d9a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3d9c:	b25b      	sxtb	r3, r3
    3d9e:	2b00      	cmp	r3, #0
    3da0:	dbfb      	blt.n	3d9a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3da2:	4a09      	ldr	r2, [pc, #36]	; (3dc8 <system_gclk_gen_set_config+0xa8>)
    3da4:	6853      	ldr	r3, [r2, #4]
    3da6:	2180      	movs	r1, #128	; 0x80
    3da8:	0249      	lsls	r1, r1, #9
    3daa:	400b      	ands	r3, r1
    3dac:	431d      	orrs	r5, r3
    3dae:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3db0:	4b08      	ldr	r3, [pc, #32]	; (3dd4 <system_gclk_gen_set_config+0xb4>)
    3db2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3db4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3db6:	2200      	movs	r2, #0
    3db8:	e7d2      	b.n	3d60 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3dba:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3dbc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3dbe:	2380      	movs	r3, #128	; 0x80
    3dc0:	029b      	lsls	r3, r3, #10
    3dc2:	431d      	orrs	r5, r3
    3dc4:	e7d2      	b.n	3d6c <system_gclk_gen_set_config+0x4c>
    3dc6:	46c0      	nop			; (mov r8, r8)
    3dc8:	40000c00 	.word	0x40000c00
    3dcc:	00003b11 	.word	0x00003b11
    3dd0:	40000c08 	.word	0x40000c08
    3dd4:	00003b51 	.word	0x00003b51

00003dd8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3dd8:	b510      	push	{r4, lr}
    3dda:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3ddc:	4a0b      	ldr	r2, [pc, #44]	; (3e0c <system_gclk_gen_enable+0x34>)
    3dde:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3de0:	b25b      	sxtb	r3, r3
    3de2:	2b00      	cmp	r3, #0
    3de4:	dbfb      	blt.n	3dde <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3de6:	4b0a      	ldr	r3, [pc, #40]	; (3e10 <system_gclk_gen_enable+0x38>)
    3de8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3dea:	4b0a      	ldr	r3, [pc, #40]	; (3e14 <system_gclk_gen_enable+0x3c>)
    3dec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3dee:	4a07      	ldr	r2, [pc, #28]	; (3e0c <system_gclk_gen_enable+0x34>)
    3df0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3df2:	b25b      	sxtb	r3, r3
    3df4:	2b00      	cmp	r3, #0
    3df6:	dbfb      	blt.n	3df0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3df8:	4a04      	ldr	r2, [pc, #16]	; (3e0c <system_gclk_gen_enable+0x34>)
    3dfa:	6851      	ldr	r1, [r2, #4]
    3dfc:	2380      	movs	r3, #128	; 0x80
    3dfe:	025b      	lsls	r3, r3, #9
    3e00:	430b      	orrs	r3, r1
    3e02:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3e04:	4b04      	ldr	r3, [pc, #16]	; (3e18 <system_gclk_gen_enable+0x40>)
    3e06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)
    3e0c:	40000c00 	.word	0x40000c00
    3e10:	00003b11 	.word	0x00003b11
    3e14:	40000c04 	.word	0x40000c04
    3e18:	00003b51 	.word	0x00003b51

00003e1c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3e1c:	b510      	push	{r4, lr}
    3e1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3e20:	4b0f      	ldr	r3, [pc, #60]	; (3e60 <system_gclk_chan_disable+0x44>)
    3e22:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3e24:	4b0f      	ldr	r3, [pc, #60]	; (3e64 <system_gclk_chan_disable+0x48>)
    3e26:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3e28:	4a0f      	ldr	r2, [pc, #60]	; (3e68 <system_gclk_chan_disable+0x4c>)
    3e2a:	8853      	ldrh	r3, [r2, #2]
    3e2c:	051b      	lsls	r3, r3, #20
    3e2e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3e30:	8853      	ldrh	r3, [r2, #2]
    3e32:	490e      	ldr	r1, [pc, #56]	; (3e6c <system_gclk_chan_disable+0x50>)
    3e34:	400b      	ands	r3, r1
    3e36:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3e38:	8853      	ldrh	r3, [r2, #2]
    3e3a:	490d      	ldr	r1, [pc, #52]	; (3e70 <system_gclk_chan_disable+0x54>)
    3e3c:	400b      	ands	r3, r1
    3e3e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3e40:	0011      	movs	r1, r2
    3e42:	2280      	movs	r2, #128	; 0x80
    3e44:	01d2      	lsls	r2, r2, #7
    3e46:	884b      	ldrh	r3, [r1, #2]
    3e48:	4213      	tst	r3, r2
    3e4a:	d1fc      	bne.n	3e46 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3e4c:	4906      	ldr	r1, [pc, #24]	; (3e68 <system_gclk_chan_disable+0x4c>)
    3e4e:	884a      	ldrh	r2, [r1, #2]
    3e50:	0203      	lsls	r3, r0, #8
    3e52:	4806      	ldr	r0, [pc, #24]	; (3e6c <system_gclk_chan_disable+0x50>)
    3e54:	4002      	ands	r2, r0
    3e56:	4313      	orrs	r3, r2
    3e58:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3e5a:	4b06      	ldr	r3, [pc, #24]	; (3e74 <system_gclk_chan_disable+0x58>)
    3e5c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3e5e:	bd10      	pop	{r4, pc}
    3e60:	00003b11 	.word	0x00003b11
    3e64:	40000c02 	.word	0x40000c02
    3e68:	40000c00 	.word	0x40000c00
    3e6c:	fffff0ff 	.word	0xfffff0ff
    3e70:	ffffbfff 	.word	0xffffbfff
    3e74:	00003b51 	.word	0x00003b51

00003e78 <system_gclk_chan_set_config>:
{
    3e78:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3e7a:	780c      	ldrb	r4, [r1, #0]
    3e7c:	0224      	lsls	r4, r4, #8
    3e7e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3e80:	4b02      	ldr	r3, [pc, #8]	; (3e8c <system_gclk_chan_set_config+0x14>)
    3e82:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3e84:	b2a4      	uxth	r4, r4
    3e86:	4b02      	ldr	r3, [pc, #8]	; (3e90 <system_gclk_chan_set_config+0x18>)
    3e88:	805c      	strh	r4, [r3, #2]
}
    3e8a:	bd10      	pop	{r4, pc}
    3e8c:	00003e1d 	.word	0x00003e1d
    3e90:	40000c00 	.word	0x40000c00

00003e94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3e94:	4770      	bx	lr
	...

00003e98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3e98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3e9a:	4b05      	ldr	r3, [pc, #20]	; (3eb0 <system_init+0x18>)
    3e9c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3e9e:	4b05      	ldr	r3, [pc, #20]	; (3eb4 <system_init+0x1c>)
    3ea0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3ea2:	4b05      	ldr	r3, [pc, #20]	; (3eb8 <system_init+0x20>)
    3ea4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <system_init+0x24>)
    3ea8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3eaa:	4b05      	ldr	r3, [pc, #20]	; (3ec0 <system_init+0x28>)
    3eac:	4798      	blx	r3
}
    3eae:	bd10      	pop	{r4, pc}
    3eb0:	00003c65 	.word	0x00003c65
    3eb4:	00003b0d 	.word	0x00003b0d
    3eb8:	00003e95 	.word	0x00003e95
    3ebc:	00003e95 	.word	0x00003e95
    3ec0:	00003e95 	.word	0x00003e95

00003ec4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3ec4:	e7fe      	b.n	3ec4 <Dummy_Handler>
	...

00003ec8 <Reset_Handler>:
{
    3ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3eca:	4a2a      	ldr	r2, [pc, #168]	; (3f74 <Reset_Handler+0xac>)
    3ecc:	4b2a      	ldr	r3, [pc, #168]	; (3f78 <Reset_Handler+0xb0>)
    3ece:	429a      	cmp	r2, r3
    3ed0:	d011      	beq.n	3ef6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3ed2:	001a      	movs	r2, r3
    3ed4:	4b29      	ldr	r3, [pc, #164]	; (3f7c <Reset_Handler+0xb4>)
    3ed6:	429a      	cmp	r2, r3
    3ed8:	d20d      	bcs.n	3ef6 <Reset_Handler+0x2e>
    3eda:	4a29      	ldr	r2, [pc, #164]	; (3f80 <Reset_Handler+0xb8>)
    3edc:	3303      	adds	r3, #3
    3ede:	1a9b      	subs	r3, r3, r2
    3ee0:	089b      	lsrs	r3, r3, #2
    3ee2:	3301      	adds	r3, #1
    3ee4:	009b      	lsls	r3, r3, #2
    3ee6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3ee8:	4823      	ldr	r0, [pc, #140]	; (3f78 <Reset_Handler+0xb0>)
    3eea:	4922      	ldr	r1, [pc, #136]	; (3f74 <Reset_Handler+0xac>)
    3eec:	588c      	ldr	r4, [r1, r2]
    3eee:	5084      	str	r4, [r0, r2]
    3ef0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3ef2:	429a      	cmp	r2, r3
    3ef4:	d1fa      	bne.n	3eec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3ef6:	4a23      	ldr	r2, [pc, #140]	; (3f84 <Reset_Handler+0xbc>)
    3ef8:	4b23      	ldr	r3, [pc, #140]	; (3f88 <Reset_Handler+0xc0>)
    3efa:	429a      	cmp	r2, r3
    3efc:	d20a      	bcs.n	3f14 <Reset_Handler+0x4c>
    3efe:	43d3      	mvns	r3, r2
    3f00:	4921      	ldr	r1, [pc, #132]	; (3f88 <Reset_Handler+0xc0>)
    3f02:	185b      	adds	r3, r3, r1
    3f04:	2103      	movs	r1, #3
    3f06:	438b      	bics	r3, r1
    3f08:	3304      	adds	r3, #4
    3f0a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3f0c:	2100      	movs	r1, #0
    3f0e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3f10:	4293      	cmp	r3, r2
    3f12:	d1fc      	bne.n	3f0e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3f14:	4a1d      	ldr	r2, [pc, #116]	; (3f8c <Reset_Handler+0xc4>)
    3f16:	21ff      	movs	r1, #255	; 0xff
    3f18:	4b1d      	ldr	r3, [pc, #116]	; (3f90 <Reset_Handler+0xc8>)
    3f1a:	438b      	bics	r3, r1
    3f1c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3f1e:	39fd      	subs	r1, #253	; 0xfd
    3f20:	2390      	movs	r3, #144	; 0x90
    3f22:	005b      	lsls	r3, r3, #1
    3f24:	4a1b      	ldr	r2, [pc, #108]	; (3f94 <Reset_Handler+0xcc>)
    3f26:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3f28:	4a1b      	ldr	r2, [pc, #108]	; (3f98 <Reset_Handler+0xd0>)
    3f2a:	78d3      	ldrb	r3, [r2, #3]
    3f2c:	2503      	movs	r5, #3
    3f2e:	43ab      	bics	r3, r5
    3f30:	2402      	movs	r4, #2
    3f32:	4323      	orrs	r3, r4
    3f34:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3f36:	78d3      	ldrb	r3, [r2, #3]
    3f38:	270c      	movs	r7, #12
    3f3a:	43bb      	bics	r3, r7
    3f3c:	2608      	movs	r6, #8
    3f3e:	4333      	orrs	r3, r6
    3f40:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3f42:	4b16      	ldr	r3, [pc, #88]	; (3f9c <Reset_Handler+0xd4>)
    3f44:	7b98      	ldrb	r0, [r3, #14]
    3f46:	2230      	movs	r2, #48	; 0x30
    3f48:	4390      	bics	r0, r2
    3f4a:	2220      	movs	r2, #32
    3f4c:	4310      	orrs	r0, r2
    3f4e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3f50:	7b99      	ldrb	r1, [r3, #14]
    3f52:	43b9      	bics	r1, r7
    3f54:	4331      	orrs	r1, r6
    3f56:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3f58:	7b9a      	ldrb	r2, [r3, #14]
    3f5a:	43aa      	bics	r2, r5
    3f5c:	4322      	orrs	r2, r4
    3f5e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3f60:	4a0f      	ldr	r2, [pc, #60]	; (3fa0 <Reset_Handler+0xd8>)
    3f62:	6853      	ldr	r3, [r2, #4]
    3f64:	2180      	movs	r1, #128	; 0x80
    3f66:	430b      	orrs	r3, r1
    3f68:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3f6a:	4b0e      	ldr	r3, [pc, #56]	; (3fa4 <Reset_Handler+0xdc>)
    3f6c:	4798      	blx	r3
        main();
    3f6e:	4b0e      	ldr	r3, [pc, #56]	; (3fa8 <Reset_Handler+0xe0>)
    3f70:	4798      	blx	r3
    3f72:	e7fe      	b.n	3f72 <Reset_Handler+0xaa>
    3f74:	000041e4 	.word	0x000041e4
    3f78:	20000000 	.word	0x20000000
    3f7c:	20000008 	.word	0x20000008
    3f80:	20000004 	.word	0x20000004
    3f84:	20000008 	.word	0x20000008
    3f88:	20004064 	.word	0x20004064
    3f8c:	e000ed00 	.word	0xe000ed00
    3f90:	00002000 	.word	0x00002000
    3f94:	41007000 	.word	0x41007000
    3f98:	41005000 	.word	0x41005000
    3f9c:	41004800 	.word	0x41004800
    3fa0:	41004000 	.word	0x41004000
    3fa4:	000040c5 	.word	0x000040c5
    3fa8:	000039fd 	.word	0x000039fd

00003fac <__udivsi3>:
    3fac:	2200      	movs	r2, #0
    3fae:	0843      	lsrs	r3, r0, #1
    3fb0:	428b      	cmp	r3, r1
    3fb2:	d374      	bcc.n	409e <__udivsi3+0xf2>
    3fb4:	0903      	lsrs	r3, r0, #4
    3fb6:	428b      	cmp	r3, r1
    3fb8:	d35f      	bcc.n	407a <__udivsi3+0xce>
    3fba:	0a03      	lsrs	r3, r0, #8
    3fbc:	428b      	cmp	r3, r1
    3fbe:	d344      	bcc.n	404a <__udivsi3+0x9e>
    3fc0:	0b03      	lsrs	r3, r0, #12
    3fc2:	428b      	cmp	r3, r1
    3fc4:	d328      	bcc.n	4018 <__udivsi3+0x6c>
    3fc6:	0c03      	lsrs	r3, r0, #16
    3fc8:	428b      	cmp	r3, r1
    3fca:	d30d      	bcc.n	3fe8 <__udivsi3+0x3c>
    3fcc:	22ff      	movs	r2, #255	; 0xff
    3fce:	0209      	lsls	r1, r1, #8
    3fd0:	ba12      	rev	r2, r2
    3fd2:	0c03      	lsrs	r3, r0, #16
    3fd4:	428b      	cmp	r3, r1
    3fd6:	d302      	bcc.n	3fde <__udivsi3+0x32>
    3fd8:	1212      	asrs	r2, r2, #8
    3fda:	0209      	lsls	r1, r1, #8
    3fdc:	d065      	beq.n	40aa <__udivsi3+0xfe>
    3fde:	0b03      	lsrs	r3, r0, #12
    3fe0:	428b      	cmp	r3, r1
    3fe2:	d319      	bcc.n	4018 <__udivsi3+0x6c>
    3fe4:	e000      	b.n	3fe8 <__udivsi3+0x3c>
    3fe6:	0a09      	lsrs	r1, r1, #8
    3fe8:	0bc3      	lsrs	r3, r0, #15
    3fea:	428b      	cmp	r3, r1
    3fec:	d301      	bcc.n	3ff2 <__udivsi3+0x46>
    3fee:	03cb      	lsls	r3, r1, #15
    3ff0:	1ac0      	subs	r0, r0, r3
    3ff2:	4152      	adcs	r2, r2
    3ff4:	0b83      	lsrs	r3, r0, #14
    3ff6:	428b      	cmp	r3, r1
    3ff8:	d301      	bcc.n	3ffe <__udivsi3+0x52>
    3ffa:	038b      	lsls	r3, r1, #14
    3ffc:	1ac0      	subs	r0, r0, r3
    3ffe:	4152      	adcs	r2, r2
    4000:	0b43      	lsrs	r3, r0, #13
    4002:	428b      	cmp	r3, r1
    4004:	d301      	bcc.n	400a <__udivsi3+0x5e>
    4006:	034b      	lsls	r3, r1, #13
    4008:	1ac0      	subs	r0, r0, r3
    400a:	4152      	adcs	r2, r2
    400c:	0b03      	lsrs	r3, r0, #12
    400e:	428b      	cmp	r3, r1
    4010:	d301      	bcc.n	4016 <__udivsi3+0x6a>
    4012:	030b      	lsls	r3, r1, #12
    4014:	1ac0      	subs	r0, r0, r3
    4016:	4152      	adcs	r2, r2
    4018:	0ac3      	lsrs	r3, r0, #11
    401a:	428b      	cmp	r3, r1
    401c:	d301      	bcc.n	4022 <__udivsi3+0x76>
    401e:	02cb      	lsls	r3, r1, #11
    4020:	1ac0      	subs	r0, r0, r3
    4022:	4152      	adcs	r2, r2
    4024:	0a83      	lsrs	r3, r0, #10
    4026:	428b      	cmp	r3, r1
    4028:	d301      	bcc.n	402e <__udivsi3+0x82>
    402a:	028b      	lsls	r3, r1, #10
    402c:	1ac0      	subs	r0, r0, r3
    402e:	4152      	adcs	r2, r2
    4030:	0a43      	lsrs	r3, r0, #9
    4032:	428b      	cmp	r3, r1
    4034:	d301      	bcc.n	403a <__udivsi3+0x8e>
    4036:	024b      	lsls	r3, r1, #9
    4038:	1ac0      	subs	r0, r0, r3
    403a:	4152      	adcs	r2, r2
    403c:	0a03      	lsrs	r3, r0, #8
    403e:	428b      	cmp	r3, r1
    4040:	d301      	bcc.n	4046 <__udivsi3+0x9a>
    4042:	020b      	lsls	r3, r1, #8
    4044:	1ac0      	subs	r0, r0, r3
    4046:	4152      	adcs	r2, r2
    4048:	d2cd      	bcs.n	3fe6 <__udivsi3+0x3a>
    404a:	09c3      	lsrs	r3, r0, #7
    404c:	428b      	cmp	r3, r1
    404e:	d301      	bcc.n	4054 <__udivsi3+0xa8>
    4050:	01cb      	lsls	r3, r1, #7
    4052:	1ac0      	subs	r0, r0, r3
    4054:	4152      	adcs	r2, r2
    4056:	0983      	lsrs	r3, r0, #6
    4058:	428b      	cmp	r3, r1
    405a:	d301      	bcc.n	4060 <__udivsi3+0xb4>
    405c:	018b      	lsls	r3, r1, #6
    405e:	1ac0      	subs	r0, r0, r3
    4060:	4152      	adcs	r2, r2
    4062:	0943      	lsrs	r3, r0, #5
    4064:	428b      	cmp	r3, r1
    4066:	d301      	bcc.n	406c <__udivsi3+0xc0>
    4068:	014b      	lsls	r3, r1, #5
    406a:	1ac0      	subs	r0, r0, r3
    406c:	4152      	adcs	r2, r2
    406e:	0903      	lsrs	r3, r0, #4
    4070:	428b      	cmp	r3, r1
    4072:	d301      	bcc.n	4078 <__udivsi3+0xcc>
    4074:	010b      	lsls	r3, r1, #4
    4076:	1ac0      	subs	r0, r0, r3
    4078:	4152      	adcs	r2, r2
    407a:	08c3      	lsrs	r3, r0, #3
    407c:	428b      	cmp	r3, r1
    407e:	d301      	bcc.n	4084 <__udivsi3+0xd8>
    4080:	00cb      	lsls	r3, r1, #3
    4082:	1ac0      	subs	r0, r0, r3
    4084:	4152      	adcs	r2, r2
    4086:	0883      	lsrs	r3, r0, #2
    4088:	428b      	cmp	r3, r1
    408a:	d301      	bcc.n	4090 <__udivsi3+0xe4>
    408c:	008b      	lsls	r3, r1, #2
    408e:	1ac0      	subs	r0, r0, r3
    4090:	4152      	adcs	r2, r2
    4092:	0843      	lsrs	r3, r0, #1
    4094:	428b      	cmp	r3, r1
    4096:	d301      	bcc.n	409c <__udivsi3+0xf0>
    4098:	004b      	lsls	r3, r1, #1
    409a:	1ac0      	subs	r0, r0, r3
    409c:	4152      	adcs	r2, r2
    409e:	1a41      	subs	r1, r0, r1
    40a0:	d200      	bcs.n	40a4 <__udivsi3+0xf8>
    40a2:	4601      	mov	r1, r0
    40a4:	4152      	adcs	r2, r2
    40a6:	4610      	mov	r0, r2
    40a8:	4770      	bx	lr
    40aa:	e7ff      	b.n	40ac <__udivsi3+0x100>
    40ac:	b501      	push	{r0, lr}
    40ae:	2000      	movs	r0, #0
    40b0:	f000 f806 	bl	40c0 <__aeabi_idiv0>
    40b4:	bd02      	pop	{r1, pc}
    40b6:	46c0      	nop			; (mov r8, r8)

000040b8 <__aeabi_uidivmod>:
    40b8:	2900      	cmp	r1, #0
    40ba:	d0f7      	beq.n	40ac <__udivsi3+0x100>
    40bc:	e776      	b.n	3fac <__udivsi3>
    40be:	4770      	bx	lr

000040c0 <__aeabi_idiv0>:
    40c0:	4770      	bx	lr
    40c2:	46c0      	nop			; (mov r8, r8)

000040c4 <__libc_init_array>:
    40c4:	b570      	push	{r4, r5, r6, lr}
    40c6:	2600      	movs	r6, #0
    40c8:	4d0c      	ldr	r5, [pc, #48]	; (40fc <__libc_init_array+0x38>)
    40ca:	4c0d      	ldr	r4, [pc, #52]	; (4100 <__libc_init_array+0x3c>)
    40cc:	1b64      	subs	r4, r4, r5
    40ce:	10a4      	asrs	r4, r4, #2
    40d0:	42a6      	cmp	r6, r4
    40d2:	d109      	bne.n	40e8 <__libc_init_array+0x24>
    40d4:	2600      	movs	r6, #0
    40d6:	f000 f875 	bl	41c4 <_init>
    40da:	4d0a      	ldr	r5, [pc, #40]	; (4104 <__libc_init_array+0x40>)
    40dc:	4c0a      	ldr	r4, [pc, #40]	; (4108 <__libc_init_array+0x44>)
    40de:	1b64      	subs	r4, r4, r5
    40e0:	10a4      	asrs	r4, r4, #2
    40e2:	42a6      	cmp	r6, r4
    40e4:	d105      	bne.n	40f2 <__libc_init_array+0x2e>
    40e6:	bd70      	pop	{r4, r5, r6, pc}
    40e8:	00b3      	lsls	r3, r6, #2
    40ea:	58eb      	ldr	r3, [r5, r3]
    40ec:	4798      	blx	r3
    40ee:	3601      	adds	r6, #1
    40f0:	e7ee      	b.n	40d0 <__libc_init_array+0xc>
    40f2:	00b3      	lsls	r3, r6, #2
    40f4:	58eb      	ldr	r3, [r5, r3]
    40f6:	4798      	blx	r3
    40f8:	3601      	adds	r6, #1
    40fa:	e7f2      	b.n	40e2 <__libc_init_array+0x1e>
    40fc:	000041d0 	.word	0x000041d0
    4100:	000041d0 	.word	0x000041d0
    4104:	000041d0 	.word	0x000041d0
    4108:	000041d4 	.word	0x000041d4

0000410c <memcpy>:
    410c:	2300      	movs	r3, #0
    410e:	b510      	push	{r4, lr}
    4110:	429a      	cmp	r2, r3
    4112:	d100      	bne.n	4116 <memcpy+0xa>
    4114:	bd10      	pop	{r4, pc}
    4116:	5ccc      	ldrb	r4, [r1, r3]
    4118:	54c4      	strb	r4, [r0, r3]
    411a:	3301      	adds	r3, #1
    411c:	e7f8      	b.n	4110 <memcpy+0x4>

0000411e <memset>:
    411e:	0003      	movs	r3, r0
    4120:	1882      	adds	r2, r0, r2
    4122:	4293      	cmp	r3, r2
    4124:	d100      	bne.n	4128 <memset+0xa>
    4126:	4770      	bx	lr
    4128:	7019      	strb	r1, [r3, #0]
    412a:	3301      	adds	r3, #1
    412c:	e7f9      	b.n	4122 <memset+0x4>
    412e:	0000      	movs	r0, r0
    4130:	454c4449 	.word	0x454c4449
    4134:	00000000 	.word	0x00000000
    4138:	000038ba 	.word	0x000038ba
    413c:	000038ba 	.word	0x000038ba
    4140:	000038ba 	.word	0x000038ba
    4144:	00003908 	.word	0x00003908
    4148:	00003914 	.word	0x00003914
    414c:	00003938 	.word	0x00003938
    4150:	000038ba 	.word	0x000038ba
    4154:	000038ba 	.word	0x000038ba
    4158:	00003908 	.word	0x00003908
    415c:	00003914 	.word	0x00003914
    4160:	51726d54 	.word	0x51726d54
    4164:	00000000 	.word	0x00000000
    4168:	20726d54 	.word	0x20726d54
    416c:	00637653 	.word	0x00637653
    4170:	6b736174 	.word	0x6b736174
    4174:	696c625f 	.word	0x696c625f
    4178:	6c5f6b6e 	.word	0x6c5f6b6e
    417c:	00006465 	.word	0x00006465
    4180:	6b736174 	.word	0x6b736174
    4184:	696c625f 	.word	0x696c625f
    4188:	725f6b6e 	.word	0x725f6b6e
    418c:	00000078 	.word	0x00000078
    4190:	6b736174 	.word	0x6b736174
    4194:	696c625f 	.word	0x696c625f
    4198:	745f6b6e 	.word	0x745f6b6e
    419c:	00000078 	.word	0x00000078
    41a0:	00003be8 	.word	0x00003be8
    41a4:	00003bc8 	.word	0x00003bc8
    41a8:	00003bc8 	.word	0x00003bc8
    41ac:	00003c54 	.word	0x00003c54
    41b0:	00003bda 	.word	0x00003bda
    41b4:	00003bf6 	.word	0x00003bf6
    41b8:	00003bcc 	.word	0x00003bcc
    41bc:	00003c04 	.word	0x00003c04
    41c0:	00003c44 	.word	0x00003c44

000041c4 <_init>:
    41c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41ca:	bc08      	pop	{r3}
    41cc:	469e      	mov	lr, r3
    41ce:	4770      	bx	lr

000041d0 <__init_array_start>:
    41d0:	000020dd 	.word	0x000020dd

000041d4 <_fini>:
    41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41da:	bc08      	pop	{r3}
    41dc:	469e      	mov	lr, r3
    41de:	4770      	bx	lr

000041e0 <__fini_array_start>:
    41e0:	000020b5 	.word	0x000020b5
